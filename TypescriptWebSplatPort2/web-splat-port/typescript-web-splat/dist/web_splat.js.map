{
  "version": 3,
  "sources": ["../node_modules/gl-matrix/esm/common.js", "../node_modules/gl-matrix/esm/mat3.js", "../node_modules/gl-matrix/esm/mat4.js", "../node_modules/gl-matrix/esm/quat.js", "../node_modules/gl-matrix/esm/vec3.js", "../node_modules/gl-matrix/esm/vec4.js", "../node_modules/gl-matrix/esm/vec2.js", "../src/camera.ts", "../src/uniform.ts", "../src/pointcloud.ts", "../src/gpu_rs.ts", "../src/renderer.ts", "../src/controller.ts", "../src/utils.ts", "../src/io/ply.ts", "../src/io/mod.ts", "../src/scene.ts", "../src/lib.ts"],
  "sourcesContent": ["/**\n * Common utilities\n * @module glMatrix\n */\n\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== \"undefined\" ? Float32Array : Array;\nexport var RANDOM = Math.random;\nexport var ANGLE_ORDER = \"zyx\";\n\n/**\n * Symmetric round\n * see https://www.npmjs.com/package/round-half-up-symmetric#user-content-detailed-background\n *\n * @param {Number} a value to round\n */\nexport function round(a) {\n  if (a >= 0) return Math.round(a);\n  return a % 0.5 === 0 ? Math.floor(a) : Math.round(a);\n}\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\nvar radian = 180 / Math.PI;\n\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\nexport function toRadian(a) {\n  return a * degree;\n}\n\n/**\n * Convert Radian To Degree\n *\n * @param {Number} a Angle in Radians\n */\nexport function toDegree(a) {\n  return a * radian;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a          The first number to test.\n * @param {Number} b          The second number to test.\n * @param {Number} tolerance  Absolute or relative tolerance (default glMatrix.EPSILON)\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nexport function equals(a, b) {\n  var tolerance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : EPSILON;\n  return Math.abs(a - b) <= tolerance * Math.max(1, Math.abs(a), Math.abs(b));\n}", "import * as glMatrix from \"./common.js\";\n\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n      a02 = a[2],\n      a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n  return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3 | null} out, or null if source matrix is not invertible\n */\nexport function invert(out, a) {\n  var a00 = a[0],\n    a01 = a[1],\n    a02 = a[2];\n  var a10 = a[3],\n    a11 = a[4],\n    a12 = a[5];\n  var a20 = a[6],\n    a21 = a[7],\n    a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20;\n\n  // Calculate the determinant\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\nexport function adjoint(out, a) {\n  var a00 = a[0],\n    a01 = a[1],\n    a02 = a[2];\n  var a10 = a[3],\n    a11 = a[4],\n    a12 = a[5];\n  var a20 = a[6],\n    a21 = a[7],\n    a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  var a00 = a[0],\n    a01 = a[1],\n    a02 = a[2];\n  var a10 = a[3],\n    a11 = a[4],\n    a12 = a[5];\n  var a20 = a[6],\n    a21 = a[7],\n    a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n    a01 = a[1],\n    a02 = a[2];\n  var a10 = a[3],\n    a11 = a[4],\n    a12 = a[5];\n  var a20 = a[6],\n    a21 = a[7],\n    a22 = a[8];\n  var b00 = b[0],\n    b01 = b[1],\n    b02 = b[2];\n  var b10 = b[3],\n    b11 = b[4],\n    b12 = b[5];\n  var b20 = b[6],\n    b21 = b[7],\n    b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\nexport function translate(out, a, v) {\n  var a00 = a[0],\n    a01 = a[1],\n    a02 = a[2],\n    a10 = a[3],\n    a11 = a[4],\n    a12 = a[5],\n    a20 = a[6],\n    a21 = a[7],\n    a22 = a[8],\n    x = v[0],\n    y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n    a01 = a[1],\n    a02 = a[2],\n    a10 = a[3],\n    a11 = a[4],\n    a12 = a[5],\n    a20 = a[6],\n    a21 = a[7],\n    a22 = a[8],\n    s = Math.sin(rad),\n    c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nexport function scale(out, a, v) {\n  var x = v[0],\n    y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n    c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\nexport function fromQuat(out, q) {\n  var x = q[0],\n    y = q[1],\n    z = q[2],\n    w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n    a01 = a[1],\n    a02 = a[2],\n    a03 = a[3];\n  var a10 = a[4],\n    a11 = a[5],\n    a12 = a[6],\n    a13 = a[7];\n  var a20 = a[8],\n    a21 = a[9],\n    a22 = a[10],\n    a23 = a[11];\n  var a30 = a[12],\n    a31 = a[13],\n    a32 = a[14],\n    a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2] + a[3] * a[3] + a[4] * a[4] + a[5] * a[5] + a[6] * a[6] + a[7] * a[7] + a[8] * a[8]);\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  var a0 = a[0],\n    a1 = a[1],\n    a2 = a[2],\n    a3 = a[3],\n    a4 = a[4],\n    a5 = a[5],\n    a6 = a[6],\n    a7 = a[7],\n    a8 = a[8];\n  var b0 = b[0],\n    b1 = b[1],\n    b2 = b[2],\n    b3 = b[3],\n    b4 = b[4],\n    b5 = b[5],\n    b6 = b[6],\n    b7 = b[7],\n    b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nexport var mul = multiply;\n\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nexport var sub = subtract;", "import * as glMatrix from \"./common.js\";\n\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n    var a12 = a[6],\n      a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n  return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4 | null} out, or null if source matrix is not invertible\n */\nexport function invert(out, a) {\n  var a00 = a[0],\n    a01 = a[1],\n    a02 = a[2],\n    a03 = a[3];\n  var a10 = a[4],\n    a11 = a[5],\n    a12 = a[6],\n    a13 = a[7];\n  var a20 = a[8],\n    a21 = a[9],\n    a22 = a[10],\n    a23 = a[11];\n  var a30 = a[12],\n    a31 = a[13],\n    a32 = a[14],\n    a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\nexport function adjoint(out, a) {\n  var a00 = a[0],\n    a01 = a[1],\n    a02 = a[2],\n    a03 = a[3];\n  var a10 = a[4],\n    a11 = a[5],\n    a12 = a[6],\n    a13 = a[7];\n  var a20 = a[8],\n    a21 = a[9],\n    a22 = a[10],\n    a23 = a[11];\n  var a30 = a[12],\n    a31 = a[13],\n    a32 = a[14],\n    a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32;\n  out[0] = a11 * b11 - a12 * b10 + a13 * b09;\n  out[1] = a02 * b10 - a01 * b11 - a03 * b09;\n  out[2] = a31 * b05 - a32 * b04 + a33 * b03;\n  out[3] = a22 * b04 - a21 * b05 - a23 * b03;\n  out[4] = a12 * b08 - a10 * b11 - a13 * b07;\n  out[5] = a00 * b11 - a02 * b08 + a03 * b07;\n  out[6] = a32 * b02 - a30 * b05 - a33 * b01;\n  out[7] = a20 * b05 - a22 * b02 + a23 * b01;\n  out[8] = a10 * b10 - a11 * b08 + a13 * b06;\n  out[9] = a01 * b08 - a00 * b10 - a03 * b06;\n  out[10] = a30 * b04 - a31 * b02 + a33 * b00;\n  out[11] = a21 * b02 - a20 * b04 - a23 * b00;\n  out[12] = a11 * b07 - a10 * b09 - a12 * b06;\n  out[13] = a00 * b09 - a01 * b07 + a02 * b06;\n  out[14] = a31 * b01 - a30 * b03 - a32 * b00;\n  out[15] = a20 * b03 - a21 * b01 + a22 * b00;\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  var a00 = a[0],\n    a01 = a[1],\n    a02 = a[2],\n    a03 = a[3];\n  var a10 = a[4],\n    a11 = a[5],\n    a12 = a[6],\n    a13 = a[7];\n  var a20 = a[8],\n    a21 = a[9],\n    a22 = a[10],\n    a23 = a[11];\n  var a30 = a[12],\n    a31 = a[13],\n    a32 = a[14],\n    a33 = a[15];\n  var b0 = a00 * a11 - a01 * a10;\n  var b1 = a00 * a12 - a02 * a10;\n  var b2 = a01 * a12 - a02 * a11;\n  var b3 = a20 * a31 - a21 * a30;\n  var b4 = a20 * a32 - a22 * a30;\n  var b5 = a21 * a32 - a22 * a31;\n  var b6 = a00 * b5 - a01 * b4 + a02 * b3;\n  var b7 = a10 * b5 - a11 * b4 + a12 * b3;\n  var b8 = a20 * b2 - a21 * b1 + a22 * b0;\n  var b9 = a30 * b2 - a31 * b1 + a32 * b0;\n\n  // Calculate the determinant\n  return a13 * b6 - a03 * b7 + a33 * b8 - a23 * b9;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n    a01 = a[1],\n    a02 = a[2],\n    a03 = a[3];\n  var a10 = a[4],\n    a11 = a[5],\n    a12 = a[6],\n    a13 = a[7];\n  var a20 = a[8],\n    a21 = a[9],\n    a22 = a[10],\n    a23 = a[11];\n  var a30 = a[12],\n    a31 = a[13],\n    a32 = a[14],\n    a33 = a[15];\n\n  // Cache only the current line of the second matrix\n  var b0 = b[0],\n    b1 = b[1],\n    b2 = b[2],\n    b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\nexport function translate(out, a, v) {\n  var x = v[0],\n    y = v[1],\n    z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n  return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nexport function scale(out, a, v) {\n  var x = v[0],\n    y = v[1],\n    z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n    y = axis[1],\n    z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11];\n\n  // Construct the elements of the rotation matrix\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n    y = axis[1],\n    z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *     let quatMat = mat4.create();\n *     mat4.fromQuat(quatMat, quat);\n *     mat4.multiply(dest, dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n    y = q[1],\n    z = q[2],\n    w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw;\n  //Only scale if it makes sense\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion parameter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n  return out;\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n  return out;\n}\n\n/**\n * Decomposes a transformation matrix into its rotation, translation\n * and scale components. Returns only the rotation component\n * @param  {quat} out_r Quaternion to receive the rotation component\n * @param  {vec3} out_t Vector to receive the translation vector\n * @param  {vec3} out_s Vector to receive the scaling factor\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @returns {quat} out_r\n */\nexport function decompose(out_r, out_t, out_s, mat) {\n  out_t[0] = mat[12];\n  out_t[1] = mat[13];\n  out_t[2] = mat[14];\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out_s[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out_s[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out_s[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n  var is1 = 1 / out_s[0];\n  var is2 = 1 / out_s[1];\n  var is3 = 1 / out_s[2];\n  var sm11 = m11 * is1;\n  var sm12 = m12 * is2;\n  var sm13 = m13 * is3;\n  var sm21 = m21 * is1;\n  var sm22 = m22 * is2;\n  var sm23 = m23 * is3;\n  var sm31 = m31 * is1;\n  var sm32 = m32 * is2;\n  var sm33 = m33 * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out_r[3] = 0.25 * S;\n    out_r[0] = (sm23 - sm32) / S;\n    out_r[1] = (sm31 - sm13) / S;\n    out_r[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out_r[3] = (sm23 - sm32) / S;\n    out_r[0] = 0.25 * S;\n    out_r[1] = (sm12 + sm21) / S;\n    out_r[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out_r[3] = (sm31 - sm13) / S;\n    out_r[0] = (sm12 + sm21) / S;\n    out_r[1] = 0.25 * S;\n    out_r[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out_r[3] = (sm12 - sm21) / S;\n    out_r[0] = (sm31 + sm13) / S;\n    out_r[1] = (sm23 + sm32) / S;\n    out_r[2] = 0.25 * S;\n  }\n  return out_r;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *     let quatMat = mat4.create();\n *     mat4.fromQuat(quatMat, quat);\n *     mat4.multiply(dest, dest, quatMat);\n *     mat4.scale(dest, dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n    y = q[1],\n    z = q[2],\n    w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *     mat4.translate(dest, dest, origin);\n *     let quatMat = mat4.create();\n *     mat4.fromQuat(quatMat, quat);\n *     mat4.multiply(dest, dest, quatMat);\n *     mat4.scale(dest, dest, scale)\n *     mat4.translate(dest, dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n    y = q[1],\n    z = q[2],\n    w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nexport function fromQuat(out, q) {\n  var x = q[0],\n    y = q[1],\n    z = q[2],\n    w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2);\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n  if (far != null && far !== Infinity) {\n    var nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n  return out;\n}\n\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\nexport var perspective = perspectiveNO;\n\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2);\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n  if (far != null && far !== Infinity) {\n    var nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\nexport var ortho = orthoNO;\n\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} target Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n    eyey = eye[1],\n    eyez = eye[2],\n    upx = up[0],\n    upy = up[1],\n    upz = up[2];\n  var z0 = eyex - target[0],\n    z1 = eyey - target[1],\n    z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n  var x0 = upy * z2 - upz * z1,\n    x1 = upz * z0 - upx * z2,\n    x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2] + a[3] * a[3] + a[4] * a[4] + a[5] * a[5] + a[6] * a[6] + a[7] * a[7] + a[8] * a[8] + a[9] * a[9] + a[10] * a[10] + a[11] * a[11] + a[12] * a[12] + a[13] * a[13] + a[14] * a[14] + a[15] * a[15]);\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  var a0 = a[0],\n    a1 = a[1],\n    a2 = a[2],\n    a3 = a[3];\n  var a4 = a[4],\n    a5 = a[5],\n    a6 = a[6],\n    a7 = a[7];\n  var a8 = a[8],\n    a9 = a[9],\n    a10 = a[10],\n    a11 = a[11];\n  var a12 = a[12],\n    a13 = a[13],\n    a14 = a[14],\n    a15 = a[15];\n  var b0 = b[0],\n    b1 = b[1],\n    b2 = b[2],\n    b3 = b[3];\n  var b4 = b[4],\n    b5 = b[5],\n    b6 = b[6],\n    b7 = b[7];\n  var b8 = b[8],\n    b9 = b[9],\n    b10 = b[10],\n    b11 = b[11];\n  var b12 = b[12],\n    b13 = b[13],\n    b14 = b[14],\n    b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nexport var mul = multiply;\n\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nexport var sub = subtract;", "import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n\n/**\n * Quaternion in the format XYZW\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyVec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n  return rad;\n}\n\n/**\n * Gets the angular distance between two unit quaternions\n *\n * @param  {ReadonlyQuat} a     Origin unit quaternion\n * @param  {ReadonlyQuat} b     Destination unit quaternion\n * @return {Number}     Angle, in radians, between the two quaternions\n */\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n  var ax = a[0],\n    ay = a[1],\n    az = a[2],\n    aw = a[3];\n  var bx = b[0],\n    by = b[1],\n    bz = b[2],\n    bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n    ay = a[1],\n    az = a[2],\n    aw = a[3];\n  var bx = Math.sin(rad),\n    bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n    ay = a[1],\n    az = a[2],\n    aw = a[3];\n  var by = Math.sin(rad),\n    bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n    ay = a[1],\n    az = a[2],\n    aw = a[3];\n  var bz = Math.sin(rad),\n    bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate W component of\n * @returns {quat} out\n */\nexport function calculateW(out, a) {\n  var x = a[0],\n    y = a[1],\n    z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n\n/**\n * Calculate the exponential of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\nexport function exp(out, a) {\n  var x = a[0],\n    y = a[1],\n    z = a[2],\n    w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n\n/**\n * Calculate the natural logarithm of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\nexport function ln(out, a) {\n  var x = a[0],\n    y = a[1],\n    z = a[2],\n    w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n\n/**\n * Calculate the scalar power of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @param {Number} b amount to scale the quaternion by\n * @returns {quat} out\n */\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n    ay = a[1],\n    az = a[2],\n    aw = a[3];\n  var bx = b[0],\n    by = b[1],\n    bz = b[2],\n    bw = b[3];\n  var omega, cosom, sinom, scale0, scale1;\n\n  // calc cosine\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\n  // adjust signs (if necessary)\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  }\n  // calculate coefficients\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  }\n  // calculate final values\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n\n/**\n * Generates a random unit quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n  var a0 = a[0],\n    a1 = a[1],\n    a2 = a[2],\n    a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0;\n\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyMat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n  return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z using the provided intrinsic order for the conversion.\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x Angle to rotate around X axis in degrees.\n * @param {Number} y Angle to rotate around Y axis in degrees.\n * @param {Number} z Angle to rotate around Z axis in degrees.\n * @param {'xyz'|'xzy'|'yxz'|'yzx'|'zxy'|'zyx'} order Intrinsic order for conversion, default is zyx.\n * @returns {quat} out\n * @function\n */\nexport function fromEuler(out, x, y, z) {\n  var order = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : glMatrix.ANGLE_ORDER;\n  var halfToRad = Math.PI / 360;\n  x *= halfToRad;\n  z *= halfToRad;\n  y *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  switch (order) {\n    case \"xyz\":\n      out[0] = sx * cy * cz + cx * sy * sz;\n      out[1] = cx * sy * cz - sx * cy * sz;\n      out[2] = cx * cy * sz + sx * sy * cz;\n      out[3] = cx * cy * cz - sx * sy * sz;\n      break;\n    case \"xzy\":\n      out[0] = sx * cy * cz - cx * sy * sz;\n      out[1] = cx * sy * cz - sx * cy * sz;\n      out[2] = cx * cy * sz + sx * sy * cz;\n      out[3] = cx * cy * cz + sx * sy * sz;\n      break;\n    case \"yxz\":\n      out[0] = sx * cy * cz + cx * sy * sz;\n      out[1] = cx * sy * cz - sx * cy * sz;\n      out[2] = cx * cy * sz - sx * sy * cz;\n      out[3] = cx * cy * cz + sx * sy * sz;\n      break;\n    case \"yzx\":\n      out[0] = sx * cy * cz + cx * sy * sz;\n      out[1] = cx * sy * cz + sx * cy * sz;\n      out[2] = cx * cy * sz - sx * sy * cz;\n      out[3] = cx * cy * cz - sx * sy * sz;\n      break;\n    case \"zxy\":\n      out[0] = sx * cy * cz - cx * sy * sz;\n      out[1] = cx * sy * cz + sx * cy * sz;\n      out[2] = cx * cy * sz + sx * sy * cz;\n      out[3] = cx * cy * cz - sx * sy * sz;\n      break;\n    case \"zyx\":\n      out[0] = sx * cy * cz - cx * sy * sz;\n      out[1] = cx * sy * cz + sx * cy * sz;\n      out[2] = cx * cy * sz - sx * sy * cz;\n      out[3] = cx * cy * cz + sx * sy * sz;\n      break;\n    default:\n      throw new Error('Unknown angle order ' + order);\n  }\n  return out;\n}\n\n/**\n * Returns a string representation of a quaternion\n *\n * @param {ReadonlyQuat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nexport var clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nexport var fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport var copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport var set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport var add = vec4.add;\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nexport var mul = multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {ReadonlyQuat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport var scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport var dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\nexport var lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport var length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nexport var len = length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nexport var squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nexport var sqrLen = squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport var normalize = vec4.normalize;\n\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat} a The first quaternion.\n * @param {ReadonlyQuat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport var exactEquals = vec4.exactEquals;\n\n/**\n * Returns whether or not the quaternions point approximately to the same direction.\n *\n * Both quaternions are assumed to be unit length.\n *\n * @param {ReadonlyQuat} a The first unit quaternion.\n * @param {ReadonlyQuat} b The second unit quaternion.\n * @returns {Boolean} True if the quaternions are equal, false otherwise.\n */\nexport function equals(a, b) {\n  return Math.abs(vec4.dot(a, b)) >= 1 - glMatrix.EPSILON;\n}\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {ReadonlyVec3} a the initial vector\n * @param {ReadonlyVec3} b the destination vector\n * @returns {quat} out\n */\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {ReadonlyQuat} c the third operand\n * @param {ReadonlyQuat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();", "import * as glMatrix from \"./common.js\";\n\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n\n/**\n * symmetric round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\nexport function round(out, a) {\n  out[0] = glMatrix.round(a[0]);\n  out[1] = glMatrix.round(a[1]);\n  out[2] = glMatrix.round(a[2]);\n  return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  var ax = a[0],\n    ay = a[1],\n    az = a[2];\n  var bx = b[0],\n    by = b[1],\n    bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function slerp(out, a, b, t) {\n  var angle = Math.acos(Math.min(Math.max(dot(a, b), -1), 1));\n  var sinTotal = Math.sin(angle);\n  var ratioA = Math.sin((1 - t) * angle) / sinTotal;\n  var ratioB = Math.sin(t * angle) / sinTotal;\n  out[0] = ratioA * a[0] + ratioB * b[0];\n  out[1] = ratioA * a[1] + ratioB * b[1];\n  out[2] = ratioA * a[2] + ratioB * b[2];\n  return out;\n}\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If omitted, a unit vector will be returned\n * @returns {vec3} out\n */\nexport function random(out, scale) {\n  scale = scale === undefined ? 1.0 : scale;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n    y = a[1],\n    z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n    y = a[1],\n    z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q normalized quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n  // Fast Vector Rotation using Quaternions by Robert Eisele\n  // https://raw.org/proof/vector-rotation-using-quaternions/\n\n  var qx = q[0],\n    qy = q[1],\n    qz = q[2],\n    qw = q[3];\n  var vx = a[0],\n    vy = a[1],\n    vz = a[2];\n\n  // t = q x v\n  var tx = qy * vz - qz * vy;\n  var ty = qz * vx - qx * vz;\n  var tz = qx * vy - qy * vx;\n\n  // t = 2t\n  tx = tx + tx;\n  ty = ty + ty;\n  tz = tz + tz;\n\n  // v + w t + q x t\n  out[0] = vx + qw * tx + qy * tz - qz * ty;\n  out[1] = vy + qw * ty + qz * tx - qx * tz;\n  out[2] = vz + qw * tz + qx * ty - qy * tx;\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n    r = [];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n    r = [];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n    r = [];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2];\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  var ax = a[0],\n    ay = a[1],\n    az = a[2],\n    bx = b[0],\n    by = b[1],\n    bz = b[2],\n    mag = Math.sqrt((ax * ax + ay * ay + az * az) * (bx * bx + by * by + bz * bz)),\n    cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  var a0 = a[0],\n    a1 = a[1],\n    a2 = a[2];\n  var b0 = b[0],\n    b1 = b[1],\n    b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nexport var sub = subtract;\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nexport var mul = multiply;\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nexport var div = divide;\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nexport var dist = distance;\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nexport var sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nexport var len = length;\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nexport var sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n    if (!stride) {\n      stride = 3;\n    }\n    if (!offset) {\n      offset = 0;\n    }\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n    return a;\n  };\n}();", "import * as glMatrix from \"./common.js\";\n\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n\n/**\n * symmetric round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\nexport function round(out, a) {\n  out[0] = glMatrix.round(a[0]);\n  out[1] = glMatrix.round(a[1]);\n  out[2] = glMatrix.round(a[2]);\n  out[3] = glMatrix.round(a[3]);\n  return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} out the receiving vector\n * @param {ReadonlyVec4} u the first vector\n * @param {ReadonlyVec4} v the second vector\n * @param {ReadonlyVec4} w the third vector\n * @returns {vec4} result\n */\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n    B = v[0] * w[2] - v[2] * w[0],\n    C = v[0] * w[3] - v[3] * w[0],\n    D = v[1] * w[2] - v[2] * w[1],\n    E = v[1] * w[3] - v[3] * w[1],\n    F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If omitted, a unit vector will be returned\n * @returns {vec4} out\n */\nexport function random(out, scale) {\n  scale = scale === undefined ? 1.0 : scale;\n\n  // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n  var v1, v2, v3, v4;\n  var s1, s2;\n  var rand;\n  rand = glMatrix.RANDOM();\n  v1 = rand * 2 - 1;\n  v2 = (4 * glMatrix.RANDOM() - 2) * Math.sqrt(rand * -rand + rand);\n  s1 = v1 * v1 + v2 * v2;\n  rand = glMatrix.RANDOM();\n  v3 = rand * 2 - 1;\n  v4 = (4 * glMatrix.RANDOM() - 2) * Math.sqrt(rand * -rand + rand);\n  s2 = v3 * v3 + v4 * v4;\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n    y = a[1],\n    z = a[2],\n    w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q normalized quaternion to transform with\n * @returns {vec4} out\n */\nexport function transformQuat(out, a, q) {\n  // Fast Vector Rotation using Quaternions by Robert Eisele\n  // https://raw.org/proof/vector-rotation-using-quaternions/\n\n  var qx = q[0],\n    qy = q[1],\n    qz = q[2],\n    qw = q[3];\n  var vx = a[0],\n    vy = a[1],\n    vz = a[2];\n\n  // t = q x v\n  var tx = qy * vz - qz * vy;\n  var ty = qz * vx - qx * vz;\n  var tz = qx * vy - qy * vx;\n\n  // t = 2t\n  tx = tx + tx;\n  ty = ty + ty;\n  tz = tz + tz;\n\n  // v + w t + q x t\n  out[0] = vx + qw * tx + qy * tz - qz * ty;\n  out[1] = vy + qw * ty + qz * tx - qx * tz;\n  out[2] = vz + qw * tz + qx * ty - qy * tx;\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  var a0 = a[0],\n    a1 = a[1],\n    a2 = a[2],\n    a3 = a[3];\n  var b0 = b[0],\n    b1 = b[1],\n    b2 = b[2],\n    b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nexport var sub = subtract;\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nexport var mul = multiply;\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nexport var div = divide;\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nexport var dist = distance;\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nexport var sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nexport var len = length;\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nexport var sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n    if (!stride) {\n      stride = 4;\n    }\n    if (!offset) {\n      offset = 0;\n    }\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n    return a;\n  };\n}();", "import * as glMatrix from \"./common.js\";\n\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {ReadonlyVec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the source vector\n * @returns {vec2} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to ceil\n * @returns {vec2} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to floor\n * @returns {vec2} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n\n/**\n * symmetric round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to round\n * @returns {vec2} out\n */\nexport function round(out, a) {\n  out[0] = glMatrix.round(a[0]);\n  out[1] = glMatrix.round(a[1]);\n  return out;\n}\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return Math.sqrt(x * x + y * y);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return x * x + y * y;\n}\n\n/**\n * Calculates the length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  var x = a[0],\n    y = a[1];\n  return Math.sqrt(x * x + y * y);\n}\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  var x = a[0],\n    y = a[1];\n  return x * x + y * y;\n}\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to negate\n * @returns {vec2} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to invert\n * @returns {vec2} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to normalize\n * @returns {vec2} out\n */\nexport function normalize(out, a) {\n  var x = a[0],\n    y = a[1];\n  var len = x * x + y * y;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n    ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If omitted, a unit vector will be returned\n * @returns {vec2} out\n */\nexport function random(out, scale) {\n  scale = scale === undefined ? 1.0 : scale;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {ReadonlyVec2} a The vec2 point to rotate\n * @param {ReadonlyVec2} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec2} out\n */\nexport function rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n    p1 = a[1] - b[1],\n    sinC = Math.sin(rad),\n    cosC = Math.cos(rad);\n\n  //perform rotation and translate to correct position\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n\n/**\n * Get the smallest angle between two 2D vectors\n * @param {ReadonlyVec2} a The first operand\n * @param {ReadonlyVec2} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  var ax = a[0],\n    ay = a[1],\n    bx = b[0],\n    by = b[1];\n  return Math.abs(Math.atan2(ay * bx - ax * by, ax * bx + ay * by));\n}\n\n/**\n * Get the signed angle in the interval [-pi,pi] between two 2D vectors (positive if `a` is to the right of `b`)\n * \n * @param {ReadonlyVec2} a The first vector\n * @param {ReadonlyVec2} b The second vector\n * @returns {number} The signed angle in radians\n */\nexport function signedAngle(a, b) {\n  var ax = a[0],\n    ay = a[1],\n    bx = b[0],\n    by = b[1];\n  return Math.atan2(ax * by - ay * bx, ax * bx + ay * by);\n}\n\n/**\n * Set the components of a vec2 to zero\n *\n * @param {vec2} out the receiving vector\n * @returns {vec2} out\n */\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  var a0 = a[0],\n    a1 = a[1];\n  var b0 = b[0],\n    b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nexport var len = length;\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nexport var sub = subtract;\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nexport var mul = multiply;\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nexport var div = divide;\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nexport var dist = distance;\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nexport var sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nexport var sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n    if (!stride) {\n      stride = 2;\n    }\n    if (!offset) {\n      offset = 0;\n    }\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n    return a;\n  };\n}();", "// camera.ts\n// 1:1 port of camera.rs to TS/gl-matrix with camelCase method aliases used by your renderer.\n\nimport { mat4, mat3, vec3, vec2, quat } from 'gl-matrix';\nimport type { Aabb } from './pointcloud';\n\n/* ---------------- logging gate (matches renderer/uniform) ---------------- */\ndeclare global {\n  // eslint-disable-next-line no-var\n  var __LOGGING_ENABLED__: boolean | undefined;\n}\nfunction loggingEnabled(): boolean {\n  return (globalThis as any).__LOGGING_ENABLED__ ?? true;\n}\nexport function setLoggingEnabled(enabled: boolean): void {\n  (globalThis as any).__LOGGING_ENABLED__ = !!enabled;\n}\n\n// ---- logging helper ----\nfunction clog(...args: any[]) {\n  if (!loggingEnabled()) return;\n  console.log('[camera]', ...args);\n}\n\n// ---- Constants ----\nexport const VIEWPORT_Y_FLIP: mat4 = mat4.fromValues(\n  1,  0, 0, 0,\n  0, -1, 0, 0,\n  0,  0, 1, 0,\n  0,  0, 0, 1\n);\n\n// ---- Helpers equivalent to Rust free functions ----\nexport function world2view(r: mat3, t: vec3): mat4 {\n  const world = mat4.create();\n\n  // embed rotation (columns)\n  world[0] = r[0]; world[1] = r[1]; world[2]  = r[2];\n  world[4] = r[3]; world[5] = r[4]; world[6]  = r[5];\n  world[8] = r[6]; world[9] = r[7]; world[10] = r[8];\n\n  // last column is [0,0,0,1]\n  world[12] = 0; world[13] = 0; world[14] = 0; world[15] = 1;\n\n  // translation in the bottom row (matches what worked before)\n  world[3]  = t[0];\n  world[7]  = t[1];\n  world[11] = t[2];\n\n  const view = mat4.create();\n  mat4.invert(view, world);\n  mat4.transpose(view, view);\n  return view;\n}\n\nexport function build_proj(znear: number, zfar: number, fov_x: number, fov_y: number): mat4 {\n  const tanHalfY = Math.tan(fov_y * 0.5);\n  const tanHalfX = Math.tan(fov_x * 0.5);\n\n  const top = tanHalfY * znear, bottom = -top;\n  const right = tanHalfX * znear, left = -right;\n\n  const m = mat4.create();\n  // This matches Rust's build_proj() *after* its final transpose().\n  m[0]  = (2 * znear) / (right - left);\n  m[5]  = (2 * znear) / (top - bottom);\n  m[8]  = (right + left) / (right - left);\n  m[9]  = (top + bottom) / (top - bottom);\n  m[11] = 1;\n  m[10] = zfar / (zfar - znear);\n  m[14] = -(zfar * znear) / (zfar - znear);\n  m[15] = 0;\n  return m;\n}\n\nexport function focal2fov(focal: number, pixels: number): number {\n  const out = 2 * Math.atan(pixels / (2 * focal));\n  clog('focal2fov()', { focal, pixels, out });\n  return out;\n}\n\nexport function fov2focal(fov: number, pixels: number): number {\n  const out = pixels / (2 * Math.tan(fov * 0.5));\n  clog('fov2focal()', { fov, pixels, out });\n  return out;\n}\n\nexport interface FrustumPlanes {\n  near: [number, number, number, number];\n  far: [number, number, number, number];\n  left: [number, number, number, number];\n  right: [number, number, number, number];\n  top: [number, number, number, number];\n  bottom: [number, number, number, number];\n}\n\nexport interface Camera {\n  viewMatrix(): mat4;\n  projMatrix(): mat4;\n  view_matrix?(): mat4;\n  proj_matrix?(): mat4;\n  frustum_planes?(): FrustumPlanes;\n}\n\nexport class PerspectiveProjection {\n  fovx: number;\n  fovy: number;\n  znear: number;\n  zfar: number;\n  fov2view_ratio: number;\n\n  constructor(fovx: number, fovy: number, znear: number, zfar: number, fov2view_ratio = 1) {\n    this.fovx = fovx;\n    this.fovy = fovy;\n    this.znear = znear;\n    this.zfar = zfar;\n    this.fov2view_ratio = fov2view_ratio;\n    clog('PerspectiveProjection.ctor', { fovx, fovy, znear, zfar, fov2view_ratio });\n  }\n\n  static new(viewport: vec2, fov: vec2, znear: number, zfar: number): PerspectiveProjection {\n    const vr = viewport[0] / viewport[1];\n    const fr = fov[0] / fov[1];\n    clog('PerspectiveProjection.new()', { viewport: Array.from(viewport), fov: Array.from(fov), znear, zfar, vr, fr });\n    return new PerspectiveProjection(fov[0], fov[1], znear, zfar, vr / fr);\n  }\n\n  projection_matrix(): mat4 { return this.projectionMatrix(); }\n  projectionMatrix(): mat4 {\n    const m = build_proj(this.znear, this.zfar, this.fovx, this.fovy);\n    clog('projectionMatrix()', { fovx: this.fovx, fovy: this.fovy, znear: this.znear, zfar: this.zfar });\n    return m;\n  }\n\n  resize(width: number, height: number): void {\n    const prev = { fovx: this.fovx, fovy: this.fovy };\n    const ratio = width / height;\n    if (width > height) {\n      this.fovy = (this.fovx / ratio) * this.fov2view_ratio;\n    } else {\n      this.fovx = this.fovy * ratio * this.fov2view_ratio;\n    }\n    clog('PerspectiveProjection.resize()', { width, height, ratio, before: prev, after: { fovx: this.fovx, fovy: this.fovy }, fov2view_ratio: this.fov2view_ratio });\n  }\n\n  focal(viewport: vec2): vec2 {\n    const fx = fov2focal(this.fovx, viewport[0]);\n    const fy = fov2focal(this.fovy, viewport[1]);\n    const out = vec2.fromValues(fx, fy);\n    clog('PerspectiveProjection.focal()', { viewport: Array.from(viewport), fx, fy });\n    return out;\n  }\n\n  lerp(other: PerspectiveProjection, amount: number): PerspectiveProjection {\n    const a = amount, b = 1 - amount;\n    const out = new PerspectiveProjection(\n      this.fovx * b + other.fovx * a,\n      this.fovy * b + other.fovy * a,\n      this.znear * b + other.znear * a,\n      this.zfar * b + other.zfar * a,\n      this.fov2view_ratio * b + other.fov2view_ratio * a\n    );\n    clog('PerspectiveProjection.lerp()', { amount, from: { fovx: this.fovx, fovy: this.fovy, znear: this.znear, zfar: this.zfar, r: this.fov2view_ratio }, to: { fovx: other.fovx, fovy: other.fovy, znear: other.znear, zfar: other.zfar, r: other.fov2view_ratio }, out: { fovx: out.fovx, fovy: out.fovy, znear: out.znear, zfar: out.zfar, r: out.fov2view_ratio } });\n    return out;\n  }\n}\n\nexport class PerspectiveCamera implements Camera {\n  position: vec3;\n  rotation: quat;\n  projection: PerspectiveProjection;\n\n  constructor(position: vec3, rotation: quat, projection: PerspectiveProjection) {\n    this.position = vec3.clone(position);\n    this.rotation = quat.clone(rotation);\n    this.projection = projection;\n    clog('PerspectiveCamera.ctor', { position: Array.from(this.position), rotation: Array.from(this.rotation) });\n  }\n\n  static default(): PerspectiveCamera {\n    clog('PerspectiveCamera.default()');\n    return new PerspectiveCamera(\n      vec3.fromValues(0, 0, -1),\n      quat.create(),\n      new PerspectiveProjection(\n        (45 * Math.PI) / 180,\n        (45 * Math.PI) / 180,\n        0.1,\n        100,\n        1\n      )\n    );\n  }\n\n  fit_near_far(aabb: Aabb): void {\n    const c = aabb.center();\n    const r = aabb.radius();\n    const d = Math.hypot(\n      this.position[0] - c.x,\n      this.position[1] - c.y,\n      this.position[2] - c.z\n    );\n    const zfar = d + r;\n    const znear = Math.max(d - r, zfar / 1000.0);\n    this.projection.zfar = zfar;\n    this.projection.znear = znear;\n  }\n\n  // Match Rust: world2view(R, t) => inverse().transpose()\n  viewMatrix(): mat4 {\n    const world = mat4.create();\n    mat4.fromRotationTranslation(world, this.rotation, this.position);\n    const view = mat4.create();\n    mat4.invert(view, world);\n    return view;\n  }\n  view_matrix(): mat4 { return this.viewMatrix(); }\n\n  projMatrix(): mat4 {\n    const m = this.projection.projectionMatrix();\n    clog('PerspectiveCamera.projMatrix()');\n    return m;\n  }\n  proj_matrix(): mat4 { return this.projMatrix(); }\n\n  positionVec(): vec3 { return vec3.clone(this.position); }\n\n  frustum_planes(): FrustumPlanes {\n    const p = this.projMatrix();\n    const v = this.viewMatrix();\n    const pv = mat4.create();\n    mat4.multiply(pv, p, v);\n\n    const row = (r: number): [number, number, number, number] => [\n      pv[0 + r], pv[4 + r], pv[8 + r], pv[12 + r]\n    ];\n\n    const r0 = row(0), r1 = row(1), r2 = row(2), r3 = row(3);\n\n    const add = (a: number[], b: number[]) => ([\n      a[0] + b[0], a[1] + b[1], a[2] + b[2], a[3] + b[3]\n    ] as [number, number, number, number]);\n    const sub = (a: number[], b: number[]) => ([\n      a[0] - b[0], a[1] - b[1], a[2] - b[2], a[3] - b[3]\n    ] as [number, number, number, number]);\n\n    const normalize = (p: [number, number, number, number]) => {\n      const n = Math.hypot(p[0], p[1], p[2]);\n      return (n > 0) ? ([p[0] / n, p[1] / n, p[2] / n, p[3] / n] as [number, number, number, number]) : p;\n    };\n\n    const left   = normalize(add(r3, r0));\n    const right  = normalize(sub(r3, r0));\n    const bottom = normalize(add(r3, r1));\n    const top    = normalize(sub(r3, r1));\n    const near   = normalize(add(r3, r2));\n    const far    = normalize(sub(r3, r2));\n\n    clog('PerspectiveCamera.frustum_planes() computed');\n    return { near, far, left, right, top, bottom };\n  }\n\n  lerp(other: PerspectiveCamera, amount: number): PerspectiveCamera {\n    const outPos = vec3.create();\n    vec3.lerp(outPos, this.position, other.position, amount);\n    const outRot = quat.create();\n    quat.slerp(outRot, this.rotation, other.rotation, amount);\n    const proj = this.projection.lerp(other.projection, amount);\n    const out = new PerspectiveCamera(outPos, outRot, proj);\n    clog('PerspectiveCamera.lerp()', { amount, fromPos: Array.from(this.position), toPos: Array.from(other.position) });\n    return out;\n  }\n}\n", "// uniform.ts\n\n// Shared one-shot logging gate (robust to module load order)\nfunction loggingEnabled(): boolean {\n  const g = globalThis as any;\n  if (typeof g.__LOGGING_ENABLED__ === 'undefined') {\n    g.__LOGGING_ENABLED__ = true; // default to on until renderer flips it off\n  }\n  return !!g.__LOGGING_ENABLED__;\n}\n\nfunction logi(tag: string, msg: string, extra?: any) {\n  if (!loggingEnabled()) return;\n  if (extra !== undefined) {\n    console.log(`${tag} ${msg}`, extra);\n  } else {\n    console.log(`${tag} ${msg}`);\n  }\n}\n\n// FNV-1a 64-bit\nfunction hashBytesU64View(v: ArrayBufferView): string {\n  let h = 0xcbf29ce484222325n;\n  const prime = 0x100000001b3n;\n  const u8 = v instanceof Uint8Array ? v : new Uint8Array(v.buffer, v.byteOffset, v.byteLength);\n  for (let i = 0; i < u8.length; i++) {\n    h ^= BigInt(u8[i]);\n    h = (h * prime) & 0xffffffffffffffffn;\n  }\n  return h.toString(16).padStart(16, '0');\n}\n\nexport class UniformBuffer<T = ArrayBufferView> {\n  private _buffer: GPUBuffer;\n  private _data: T;\n  private _label?: string;\n  private _bind_group: GPUBindGroup;\n\n  static newDefault<T = ArrayBufferView>(\n    device: GPUDevice,\n    label?: string,\n    byteLength: number = 256\n  ): UniformBuffer<T> {\n    const buffer = device.createBuffer({\n      label,\n      size: byteLength,\n      usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n      mappedAtCreation: true\n    });\n    new Uint8Array(buffer.getMappedRange()).fill(0);\n    buffer.unmap();\n\n    const bgLabel = label ? `${label} bind group` : undefined;\n    const bind_group = device.createBindGroup({\n      label: bgLabel,\n      layout: UniformBuffer.bindGroupLayout(device),\n      entries: [{ binding: 0, resource: { buffer } }]\n    });\n\n    logi('[uniform::new_default]', `label=${String(label)} size=${byteLength} bytes`);\n\n    return new UniformBuffer<T>(buffer, (undefined as unknown as T), label, bind_group);\n  }\n\n  static new<T extends ArrayBufferView>(\n    device: GPUDevice,\n    data: T,\n    label?: string\n  ): UniformBuffer<T> {\n    const buffer = device.createBuffer({\n      label,\n      size: data.byteLength,\n      usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n      mappedAtCreation: true\n    });\n    new Uint8Array(buffer.getMappedRange()).set(\n      new Uint8Array(data.buffer as ArrayBuffer, data.byteOffset, data.byteLength)\n    );\n    buffer.unmap();\n\n    const bgLabel = label ? `${label} bind group` : undefined;\n    const bind_group = device.createBindGroup({\n      label: bgLabel,\n      layout: UniformBuffer.bindGroupLayout(device),\n      entries: [{ binding: 0, resource: { buffer } }]\n    });\n\n    logi('[uniform::new]', `label=${String(label)} size=${data.byteLength} bytes`);\n\n    return new UniformBuffer<T>(buffer, data, label, bind_group);\n  }\n\n  private constructor(buffer: GPUBuffer, data: T, label: string | undefined, bind_group: GPUBindGroup) {\n    this._buffer = buffer;\n    this._data = data;\n    this._label = label;\n    this._bind_group = bind_group;\n  }\n\n  buffer(): GPUBuffer {\n    return this._buffer;\n  }\n  data(): T {\n    return this._data;\n  }\n\n  static bind_group_layout(device: GPUDevice): GPUBindGroupLayout {\n    return this.bindGroupLayout(device);\n  }\n  static binding_type(): GPUBufferBindingLayout {\n    return this.bindingType();\n  }\n\n  sync(queue: GPUQueue): void {\n    const v = this._data as unknown as ArrayBufferView;\n    if (!v || !(v.buffer instanceof ArrayBuffer || (typeof SharedArrayBuffer !== 'undefined' && v.buffer instanceof SharedArrayBuffer))) {\n      throw new Error('UniformBuffer.sync(): data is not an ArrayBufferView. Provide bytes or use setData(bytes) first.');\n    }\n\n    const bytesView = v instanceof Uint8Array ? v : new Uint8Array(v.buffer as ArrayBuffer, v.byteOffset, v.byteLength);\n    const hash = hashBytesU64View(bytesView);\n    logi('[uniform::sync]', `label=${String(this._label)} size=${bytesView.byteLength} hash=${hash}`);\n\n    queue.writeBuffer(this._buffer, 0, v.buffer as ArrayBuffer, v.byteOffset, v.byteLength);\n  }\n\n  clone(device: GPUDevice, queue: GPUQueue): UniformBuffer<T> {\n    const buffer = device.createBuffer({\n      label: this._label,\n      usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n      size: this._buffer.size,\n      mappedAtCreation: false\n    });\n\n    const encoder = device.createCommandEncoder({ label: 'copy uniform buffer encode' });\n    encoder.copyBufferToBuffer(this._buffer, 0, buffer, 0, this._buffer.size);\n    queue.submit([encoder.finish()]);\n\n    const bind_group = device.createBindGroup({\n      label: 'uniform bind group',\n      layout: UniformBuffer.bindGroupLayout(device),\n      entries: [{ binding: 0, resource: { buffer } }]\n    });\n    return new UniformBuffer<T>(buffer, this._data, this._label, bind_group);\n  }\n\n  bind_group(): GPUBindGroup {\n    return this._bind_group;\n  }\n\n  bufferRef(): GPUBuffer {\n    return this._buffer;\n  }\n  dataRef(): T {\n    return this._data;\n  }\n  getBindGroup(): GPUBindGroup {\n    return this._bind_group;\n  }\n\n  setData(bytes: ArrayBufferView): void {\n    this._data = bytes as unknown as T;\n  }\n\n  static bindGroupLayout(device: GPUDevice): GPUBindGroupLayout {\n    return device.createBindGroupLayout({\n      label: 'uniform bind group layout',\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT | GPUShaderStage.COMPUTE,\n          buffer: UniformBuffer.bindingType()\n        }\n      ]\n    });\n  }\n\n  static bindingType(): GPUBufferBindingLayout {\n    return {\n      type: 'uniform',\n      hasDynamicOffset: false\n    };\n  }\n}\n", "// pointcloud.ts\n// 1:1 port of pointcloud.rs to WebGPU (TypeScript)\n\nimport { UniformBuffer } from './uniform';\n\n// ---- logging helper ----\nfunction pclog(...args: any[]) {\n  console.log('[pointcloud]', ...args);\n}\n\n// ---- Types mirroring the Rust structs (for clarity; buffers are passed as bytes) ----\nexport type Vec3 = { x: number; y: number; z: number };\nexport type Color3 = [number, number, number];\n\n// ---- 1:1 Rust type mirrors we need to export ----\nexport type Point3f32 = { x: number; y: number; z: number };\nexport type Vector3f32 = { x: number; y: number; z: number };\n\n// Zero-copy view over input bytes (ArrayBuffer or ArrayBufferView)\nfunction asBytes(src: ArrayBuffer | ArrayBufferView): Uint8Array {\n  return src instanceof ArrayBuffer\n    ? new Uint8Array(src)\n    : new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n}\n\n// (optional) f16 \u2192 f32\nfunction halfToFloat(h: number): number {\n  const s = (h & 0x8000) >> 15, e = (h & 0x7C00) >> 10, f = h & 0x03FF;\n  if (e === 0) return (s ? -1 : 1) * Math.pow(2, -14) * (f / 1024);\n  if (e === 31) return f ? NaN : ((s ? -1 : 1) * Infinity);\n  return (s ? -1 : 1) * Math.pow(2, e - 15) * (1 + f / 1024);\n}\n\nexport type Gaussian = {\n  xyz: Point3f32;                 // f16 triplet in source\n  opacity: number;                // f16\n  cov: [number, number, number, number, number, number]; // [f16; 6]\n};\n\nexport type GaussianCompressed = {\n  xyz: Point3f32;       // f16\n  opacity: number;      // i8\n  scale_factor: number; // i8\n  geometry_idx: number; // u32\n  sh_idx: number;       // u32\n};\n\nexport type Covariance3D = {\n  v: [number, number, number, number, number, number];\n};\n\nexport class Quantization {\n  zero_point: number;\n  scale: number;\n  _pad: [number, number];\n  constructor(zero_point = 0, scale = 1) {\n    this.zero_point = zero_point;\n    this.scale = scale;\n    this._pad = [0, 0];\n  }\n  static new(zero_point: number, scale: number) {\n    return new Quantization(zero_point, scale);\n  }\n}\n\nexport class GaussianQuantization {\n  color_dc: Quantization;\n  color_rest: Quantization;\n  opacity: Quantization;\n  scaling_factor: Quantization;\n  constructor(\n    color_dc = new Quantization(),\n    color_rest = new Quantization(),\n    opacity = new Quantization(),\n    scaling_factor = new Quantization()\n  ) {\n    this.color_dc = color_dc;\n    this.color_rest = color_rest;\n    this.opacity = opacity;\n    this.scaling_factor = scaling_factor;\n  }\n}\n\nexport class Aabb {\n  min: Vec3;\n  max: Vec3;\n\n  constructor(min: Vec3, max: Vec3) {\n    this.min = { ...min };\n    this.max = { ...max };\n  }\n\n  static unit(): Aabb {\n    return new Aabb({ x: -1, y: -1, z: -1 }, { x: 1, y: 1, z: 1 });\n  }\n\n  static zeroed(): Aabb {\n    return new Aabb({ x: 0, y: 0, z: 0 }, { x: 0, y: 0, z: 0 });\n  }\n\n  center(): Vec3 {\n    return {\n      x: (this.min.x + this.max.x) * 0.5,\n      y: (this.min.y + this.max.y) * 0.5,\n      z: (this.min.z + this.max.z) * 0.5,\n    };\n  }\n\n  radius(): number {\n    const dx = this.max.x - this.min.x;\n    const dy = this.max.y - this.min.y;\n    const dz = this.max.z - this.min.z;\n    return Math.sqrt(dx * dx + dy * dy + dz * dz) * 0.5;\n  }\n\n  size(): Vec3 {\n    return {\n      x: this.max.x - this.min.x,\n      y: this.max.y - this.min.y,\n      z: this.max.z - this.min.z,\n    };\n  }\n\n  grow(pos: Vec3): void {\n    this.min.x = Math.min(this.min.x, pos.x);\n    this.min.y = Math.min(this.min.y, pos.y);\n    this.min.z = Math.min(this.min.z, pos.z);\n    this.max.x = Math.max(this.max.x, pos.x);\n    this.max.y = Math.max(this.max.y, pos.y);\n    this.max.z = Math.max(this.max.z, pos.z);\n  }\n\n  grow_union(other: Aabb): void {\n    this.min.x = Math.min(this.min.x, other.min.x);\n    this.min.y = Math.min(this.min.y, other.min.y);\n    this.min.z = Math.min(this.min.z, other.min.z);\n    this.max.x = Math.max(this.max.x, other.max.x);\n    this.max.y = Math.max(this.max.y, other.max.y);\n    this.max.z = Math.max(this.max.z, other.max.z);\n  }\n}\n\n// Layout-compatible with WGSL struct Splat (5 x u32 = 20 bytes).\nexport const BYTES_PER_SPLAT = 20;\n\n// ---- Minimal interface your loader should satisfy (mirrors GenericGaussianPointCloud) ----\nexport interface GenericGaussianPointCloud {\n  num_points: number;\n  sh_deg: number;\n  compressed(): boolean;\n\n  gaussian_buffer(): ArrayBuffer | ArrayBufferView; // 3D gaussian source buffer\n  sh_coefs_buffer(): ArrayBuffer | ArrayBufferView; // SH buffer\n\n  // only for compressed:\n  covars?: ArrayBuffer | ArrayBufferView;   // covariance blocks\n  quantization?: ArrayBufferView;           // bytes for GaussianQuantization uniform\n\n  aabb: { min: Vec3; max: Vec3 };\n  center: Vec3;\n  up?: Vec3;\n  mip_splatting?: boolean;\n  kernel_size?: number;\n  background_color?: Color3;\n}\n\n/* ------------------------------ layout cache ------------------------------ */\n\ntype LayoutCache = {\n  plain: GPUBindGroupLayout;\n  compressed: GPUBindGroupLayout;\n  render: GPUBindGroupLayout;\n};\nconst LAYOUTS = new WeakMap<GPUDevice, LayoutCache>();\n\nfunction getLayouts(device: GPUDevice): LayoutCache {\n  let l = LAYOUTS.get(device);\n  if (l) return l;\n\n  const plain = device.createBindGroupLayout({\n    label: 'point cloud float bind group layout',\n    entries: [\n      { binding: 0, visibility: GPUShaderStage.COMPUTE, buffer: { type: 'read-only-storage' } },\n      { binding: 1, visibility: GPUShaderStage.COMPUTE, buffer: { type: 'read-only-storage' } },\n      { binding: 2, visibility: GPUShaderStage.COMPUTE, buffer: { type: 'storage' } },\n    ]\n  });\n\n  const compressed = device.createBindGroupLayout({\n    label: 'point cloud bind group layout (compressed)',\n    entries: [\n      { binding: 0, visibility: GPUShaderStage.COMPUTE, buffer: { type: 'read-only-storage' } },\n      { binding: 1, visibility: GPUShaderStage.COMPUTE, buffer: { type: 'read-only-storage' } },\n      { binding: 2, visibility: GPUShaderStage.COMPUTE, buffer: { type: 'storage' } },\n      { binding: 3, visibility: GPUShaderStage.COMPUTE, buffer: { type: 'read-only-storage' } },\n      { binding: 4, visibility: GPUShaderStage.COMPUTE, buffer: { type: 'uniform' } },\n    ]\n  });\n\n  const render = device.createBindGroupLayout({\n    label: 'point cloud rendering bind group layout',\n    entries: [\n      { binding: 2, visibility: GPUShaderStage.VERTEX | GPUShaderStage.COMPUTE, buffer: { type: 'read-only-storage' } }\n    ]\n  });\n\n  l = { plain, compressed, render };\n  LAYOUTS.set(device, l);\n  pclog('getLayouts(): created new layouts');\n  return l;\n}\n\n/* -------------------------------- PointCloud -------------------------------- */\n\nexport class PointCloud {\n  private splat_2d_buffer: GPUBuffer;\n\n  // internal fields (underscore to avoid clashes with Rust-style getter names)\n  private _bind_group: GPUBindGroup;\n  private _render_bind_group: GPUBindGroup;\n  private num_points_: number;\n  private sh_deg_: number;\n  private bbox_: Aabb;\n  private compressed_: boolean;\n\n  private center_: Vec3;\n  private up_?: Vec3;\n\n  private mip_splatting_?: boolean;\n  private kernel_size_?: number;\n  private background_color_?: GPUColor;\n\n  private vertex_buffer!: GPUBuffer; // 3D gaussians\n  private sh_buffer!: GPUBuffer;     // SH coefs\n  private covars_buffer?: GPUBuffer; // compressed only\n  private quantization_uniform?: UniformBuffer<ArrayBufferView>;\n\n  // captured for optional debug\n  private _gaussianSrc?: Uint8Array;\n  private _shSrc?: Uint8Array;\n\n  static new(device: GPUDevice, pc: GenericGaussianPointCloud): PointCloud {\n    return new PointCloud(device, pc);\n  }\n\n  private constructor(device: GPUDevice, pc: GenericGaussianPointCloud) {\n    // Persist zero-copy byte views exactly once\n    const gaussBytes = asBytes(pc.gaussian_buffer());\n    const shBytes    = asBytes(pc.sh_coefs_buffer());\n    this._gaussianSrc = gaussBytes;\n    this._shSrc = shBytes;\n\n    this.splat_2d_buffer = device.createBuffer({\n      label: '2d gaussians buffer',\n      size: (pc.num_points >>> 0) * BYTES_PER_SPLAT,\n      usage: GPUBufferUsage.VERTEX | GPUBufferUsage.STORAGE\n    });\n    pclog('ctor: created splat_2d_buffer', {\n      bytes: (pc.num_points >>> 0) * BYTES_PER_SPLAT,\n      num_points: pc.num_points\n    });\n\n    // Render bind group (only points_2d at binding=2)\n    const { render, plain, compressed } = getLayouts(device);\n    this._render_bind_group = device.createBindGroup({\n      label: 'point cloud rendering bind group',\n      layout: render,\n      entries: [{ binding: 2, resource: { buffer: this.splat_2d_buffer } }]\n    });\n    pclog('ctor: created render bind group');\n\n    // GPU buffers for 3D gaussians + SH coefs (upload without mapping)\n    this.vertex_buffer = device.createBuffer({\n      label: '3d gaussians buffer',\n      size: gaussBytes.byteLength,\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST\n    });\n    device.queue.writeBuffer(this.vertex_buffer, 0, gaussBytes);\n    pclog('ctor: uploaded vertex_buffer', { bytes: gaussBytes.byteLength });\n\n    this.sh_buffer = device.createBuffer({\n      label: 'sh coefs buffer',\n      size: shBytes.byteLength,\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST\n    });\n    device.queue.writeBuffer(this.sh_buffer, 0, shBytes);\n    pclog('ctor: uploaded sh_buffer', { bytes: shBytes.byteLength });\n\n    // Build the preprocess bind group (compressed or not)\n    const entries: GPUBindGroupEntry[] = [\n      { binding: 0, resource: { buffer: this.vertex_buffer } }, // read-only\n      { binding: 1, resource: { buffer: this.sh_buffer } },     // read-only\n      { binding: 2, resource: { buffer: this.splat_2d_buffer } } // read-write\n    ];\n\n    if (pc.compressed()) {\n      if (!pc.covars) throw new Error('compressed() true but covars missing');\n      const covBytes = asBytes(pc.covars);\n      this.covars_buffer = device.createBuffer({\n        label: 'Covariances buffer',\n        size: covBytes.byteLength,\n        usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST\n      });\n      device.queue.writeBuffer(this.covars_buffer, 0, covBytes);\n      entries.push({ binding: 3, resource: { buffer: this.covars_buffer } });\n\n      if (!pc.quantization) throw new Error('compressed() true but quantization missing');\n      this.quantization_uniform = UniformBuffer.new(device, pc.quantization, 'quantization uniform buffer');\n      entries.push({ binding: 4, resource: { buffer: this.quantization_uniform.bufferRef() } });\n\n      this._bind_group = device.createBindGroup({\n        label: 'point cloud bind group (compressed)',\n        layout: compressed,\n        entries\n      });\n      pclog('ctor: created preprocess bind group (compressed)');\n    } else {\n      this._bind_group = device.createBindGroup({\n        label: 'point cloud bind group',\n        layout: plain,\n        entries\n      });\n      pclog('ctor: created preprocess bind group (plain)');\n    }\n\n    // mirror Rust fields\n    this.num_points_ = pc.num_points >>> 0;\n    this.sh_deg_ = pc.sh_deg >>> 0;\n    this.compressed_ = pc.compressed();\n    this.bbox_ = new Aabb(pc.aabb.min, pc.aabb.max);\n    this.center_ = { ...pc.center };\n    this.up_ = pc.up ? { ...pc.up } : undefined;\n    this.mip_splatting_ = pc.mip_splatting;\n    this.kernel_size_ = pc.kernel_size;\n    this.background_color_ = pc.background_color\n      ? { r: pc.background_color[0], g: pc.background_color[1], b: pc.background_color[2], a: 1.0 }\n      : undefined;\n\n    pclog('ctor: initialized fields', {\n      num_points: this.num_points_,\n      sh_deg: this.sh_deg_,\n      compressed: this.compressed_,\n      bbox: this.bbox_,\n      center: this.center_,\n      mip_splatting: this.mip_splatting_,\n      kernel_size: this.kernel_size_,\n      background_color: this.background_color_\n    });\n  }\n\n  // --- DEBUG: log first Gaussian & SH buffer sanity info\n  public debugLogFirstGaussian(): void {\n    if (!this._gaussianSrc) {\n      console.warn('[pc] no gaussian src captured');\n      return;\n    }\n    if (this.compressed_) {\n      console.log('[pc] compressed point cloud; first-gaussian debug for raw halfs is skipped');\n      console.log('[pc] aabb:', this.bbox_, 'num_points:', this.num_points_);\n      return;\n    }\n\n    // uncompressed: 10 halfs (20 bytes) per gaussian\n    const dv = new DataView(this._gaussianSrc.buffer, this._gaussianSrc.byteOffset, this._gaussianSrc.byteLength);\n    const halves: number[] = [];\n    for (let i = 0; i < Math.min(10, (this._gaussianSrc.byteLength / 2) | 0); i++) {\n      halves.push(dv.getUint16(i * 2, true));\n    }\n    const floats = halves.map(halfToFloat);\n\n    const xyz = floats.slice(0, 3);\n    const opacity = floats[3];\n    const cov = floats.slice(4, 10);\n\n    console.log('[pc] first gaussian (halfs):', halves);\n    console.log('[pc] first gaussian (floats):', { xyz, opacity, cov });\n    console.log('[pc] aabb:', this.bbox_);\n    console.log('[pc] num_points:', this.num_points_);\n    console.log('[pc] sh bytes:', this._shSrc?.byteLength);\n  }\n\n  // ---- getters matching Rust API ----\n  compressed(): boolean { return this.compressed_; }\n  num_points(): number { return this.num_points_; }       // exact Rust name\n  numPoints(): number {\n    // hot path used by renderer/preprocess\n    return this.num_points_;\n  }\n  sh_deg(): number { return this.sh_deg_; }               // exact Rust name\n  shDeg(): number { return this.sh_deg_; }                // TS convenience\n  bbox(): Aabb { return this.bbox_; }\n\n  // Rust names (methods)\n  bind_group(): GPUBindGroup { return this._bind_group; }\n  render_bind_group(): GPUBindGroup { return this._render_bind_group; }\n\n  // TS-friendly aliases used by renderer.ts:\n  getBindGroup(): GPUBindGroup { return this._bind_group; }\n  getRenderBindGroup(): GPUBindGroup { return this._render_bind_group; }\n\n  mip_splatting(): boolean | undefined { return this.mip_splatting_; }      // exact Rust\n  mipSplatting(): boolean | undefined { return this.mip_splatting_; }       // TS convenience\n  dilation_kernel_size(): number | undefined { return this.kernel_size_; }  // exact Rust\n  dilationKernelSize(): number | undefined { return this.kernel_size_; }    // TS convenience\n  center(): Vec3 { return this.center_; }\n  up(): Vec3 | undefined { return this.up_; }\n\n  // ---- static bind group layouts (exact bindings/visibility as Rust) ----\n  static bind_group_layout_compressed(device: GPUDevice): GPUBindGroupLayout {\n    return getLayouts(device).compressed;\n  }\n  static bind_group_layout(device: GPUDevice): GPUBindGroupLayout {\n    return getLayouts(device).plain;\n  }\n  static bind_group_layout_render(device: GPUDevice): GPUBindGroupLayout {\n    return getLayouts(device).render;\n  }\n}\n", "// gpu_rs.ts\n//\n// 1:1 port of gpu_rs.rs (WebGPU radix sort for float key-value pairs)\n// - Same public API surface (GPURSSorter, PointCloudSortStuff, constants)\n// - Same bind group layouts & binding indices\n// - Loads shaders from ./shaders/radix_sort.wgsl with injected constants\n\n// ===== Constants (must match shaders/radix_sort.wgsl) =====\nexport const HISTOGRAM_WG_SIZE = 256;\nconst RS_RADIX_LOG2 = 8;\nconst RS_RADIX_SIZE = 1 << RS_RADIX_LOG2;\nconst RS_KEYVAL_SIZE = 32 / RS_RADIX_LOG2;       // 32 bits / 8 = 4 passes\nexport const RS_HISTOGRAM_BLOCK_ROWS = 15;\nconst RS_SCATTER_BLOCK_ROWS = RS_HISTOGRAM_BLOCK_ROWS; // DO NOT CHANGE (shader assumes)\nconst PREFIX_WG_SIZE = 1 << 7;                   // 128\nconst SCATTER_WG_SIZE = 1 << 8;                  // 256\n\n// ===== Types matching Rust structs =====\nexport interface PointCloudSortStuff {\n  numPoints: number;\n  sorterUni: GPUBuffer;         // \"uniform\" storage buffer with GeneralInfo\n  sorterDis: GPUBuffer;         // indirect dispatch buffer (IndirectDispatch)\n  sorterBg: GPUBindGroup;       // radix sort main bind group (6 bindings)\n  sorterRenderBg: GPUBindGroup; // render bind group (indices etc.)\n  sorterBgPre: GPUBindGroup;    // preprocess bind group (merged layout for preprocess step)\n}\n\n// GeneralInfo (5 x u32) \u2014 stored in a STORAGE buffer\ntype GeneralInfo = {\n  keys_size: number;   // u32\n  padded_size: number; // u32\n  passes: number;      // u32\n  even_pass: number;   // u32\n  odd_pass: number;    // u32\n};\n\n// IndirectDispatch (3 x u32)\ntype IndirectDispatch = {\n  dispatch_x: number;\n  dispatch_y: number;\n  dispatch_z: number;\n};\n\n// ===== Utility to write small structs =====\nfunction writeGeneralInfo(info: GeneralInfo): Uint8Array {\n  const buf = new ArrayBuffer(20);\n  const dv = new DataView(buf);\n  dv.setUint32(0, info.keys_size >>> 0, true);\n  dv.setUint32(4, info.padded_size >>> 0, true);\n  dv.setUint32(8, info.passes >>> 0, true);\n  dv.setUint32(12, info.even_pass >>> 0, true);\n  dv.setUint32(16, info.odd_pass >>> 0, true);\n  return new Uint8Array(buf);\n}\n\nfunction writeIndirectDispatch(id: IndirectDispatch): Uint8Array {\n  const buf = new ArrayBuffer(12);\n  const dv = new DataView(buf);\n  dv.setUint32(0, id.dispatch_x >>> 0, true);\n  dv.setUint32(4, id.dispatch_y >>> 0, true);\n  dv.setUint32(8, id.dispatch_z >>> 0, true);\n  return new Uint8Array(buf);\n}\n\n// ===== GPURSSorter =====\nexport class GPURSSorter {\n  private bind_group_layout!: GPUBindGroupLayout;        // full radix layout (6 bindings)\n  private render_bind_group_layout!: GPUBindGroupLayout; // render layout (bindings 0,4)\n  private preprocess_bind_group_layout!: GPUBindGroupLayout; // preprocess layout (bindings 0..3)\n\n  private zero_p!: GPUComputePipeline;\n  private histogram_p!: GPUComputePipeline;\n  private prefix_p!: GPUComputePipeline;\n  private scatter_even_p!: GPUComputePipeline;\n  private scatter_odd_p!: GPUComputePipeline;\n\n  private subgroup_size!: number;\n\n  // ---- Creation entrypoint (mirrors async new(device, queue)) ----\n  static async create(device: GPUDevice, queue: GPUQueue): Promise<GPURSSorter> {\n    // WebGPU doesn\u2019t expose subgroup size; do the same \u201Cprobe\u201D as Rust.\n    console.debug('Searching for the maximum subgroup size (browser WebGPU cannot query it).');\n    const sizes = [1, 8, 16, 32];\n    let curIdx = 2; // start at 16 like Rust does (cur_size = 2)\n    enum State { Init, Increasing, Decreasing }\n    let state: State = State.Init;\n    let biggestThatWorked = 0;\n    let curSorter: GPURSSorter | null = null;\n\n    while (true) {\n      if (curIdx >= sizes.length || curIdx < 0) break;\n      console.debug(`Checking sorting with subgroup size ${sizes[curIdx]}`);\n      const candidate = await GPURSSorter.newWithSgSize(device, sizes[curIdx]);\n      const ok = await candidate.test_sort(device, queue);\n      console.debug(`${sizes[curIdx]} worked: ${ok}`);\n      if (ok) curSorter = candidate;\n\n      switch (state) {\n        case State.Init:\n          if (ok) {\n            biggestThatWorked = sizes[curIdx];\n            state = State.Increasing;\n            curIdx += 1;\n          } else {\n            state = State.Decreasing;\n            curIdx -= 1;\n          }\n          break;\n        case State.Increasing:\n          if (ok) {\n            if (sizes[curIdx] > biggestThatWorked) biggestThatWorked = sizes[curIdx];\n            curIdx += 1;\n          } else {\n            // last ok is the best\n            break;\n          }\n          continue; // to break outer loop if needed\n        case State.Decreasing:\n          if (ok) {\n            if (sizes[curIdx] > biggestThatWorked) biggestThatWorked = sizes[curIdx];\n            break;\n          } else {\n            curIdx -= 1;\n          }\n          continue;\n      }\n      if (state === State.Increasing && (curIdx >= sizes.length)) break;\n      if (state === State.Decreasing && (curIdx < 0)) break;\n    }\n\n    if (!curSorter || biggestThatWorked === 0) {\n      throw new Error('GPURSSorter.create(): No workgroup size worked. Unable to use sorter.');\n    }\n    console.info(`Created a sorter with subgroup size ${curSorter.subgroup_size}`);\n    return curSorter;\n  }\n\n  // ---- Instance factory with a fixed subgroup size (mirrors new_with_sg_size) ----\n  private static async newWithSgSize(device: GPUDevice, sgSize: number): Promise<GPURSSorter> {\n    // compute various shared-memory sizes as in Rust\n    const histogram_sg_size = sgSize >>> 0;\n    const rs_sweep_0_size = RS_RADIX_SIZE / histogram_sg_size;\n    const rs_sweep_1_size = Math.floor(rs_sweep_0_size / histogram_sg_size);\n    const rs_sweep_2_size = Math.floor(rs_sweep_1_size / histogram_sg_size);\n    const rs_sweep_size = rs_sweep_0_size + rs_sweep_1_size + rs_sweep_2_size;\n    // phase 2 is the max\n    const rs_mem_phase_2 = RS_RADIX_SIZE + RS_SCATTER_BLOCK_ROWS * SCATTER_WG_SIZE;\n    const rs_mem_dwords = rs_mem_phase_2;\n    const rs_mem_sweep_0_offset = 0;\n    const rs_mem_sweep_1_offset = rs_mem_sweep_0_offset + rs_sweep_0_size;\n    const rs_mem_sweep_2_offset = rs_mem_sweep_1_offset + rs_sweep_1_size;\n\n    const instance = new GPURSSorter();\n    instance.bind_group_layout = GPURSSorter.bindGroupLayouts(device);\n    instance.render_bind_group_layout = GPURSSorter.bindGroupLayoutRendering(device);\n    instance.preprocess_bind_group_layout = GPURSSorter.bindGroupLayoutPreprocess(device);\n\n    const pipeline_layout = device.createPipelineLayout({\n      label: 'radix sort pipeline layout',\n      bindGroupLayouts: [instance.bind_group_layout]\n    });\n\n    // Load shader and inject constants header + placeholder replacements\n    const raw = await (await fetch('./shaders/radix_sort.wgsl')).text();\n    const header =\n      `const histogram_sg_size: u32 = ${histogram_sg_size}u;\nconst histogram_wg_size: u32 = ${HISTOGRAM_WG_SIZE}u;\nconst rs_radix_log2: u32 = ${RS_RADIX_LOG2}u;\nconst rs_radix_size: u32 = ${RS_RADIX_SIZE}u;\nconst rs_keyval_size: u32 = ${RS_KEYVAL_SIZE}u;\nconst rs_histogram_block_rows: u32 = ${RS_HISTOGRAM_BLOCK_ROWS}u;\nconst rs_scatter_block_rows: u32 = ${RS_SCATTER_BLOCK_ROWS}u;\nconst rs_mem_dwords: u32 = ${rs_mem_dwords}u;\nconst rs_mem_sweep_0_offset: u32 = ${rs_mem_sweep_0_offset}u;\nconst rs_mem_sweep_1_offset: u32 = ${rs_mem_sweep_1_offset}u;\nconst rs_mem_sweep_2_offset: u32 = ${rs_mem_sweep_2_offset}u;\n`;\n    // Replace the {histogram_wg_size}, {prefix_wg_size}, {scatter_wg_size} placeholders\n    const shader_code = (header + raw)\n      .replaceAll('{histogram_wg_size}', String(HISTOGRAM_WG_SIZE))\n      .replaceAll('{prefix_wg_size}', String(PREFIX_WG_SIZE))\n      .replaceAll('{scatter_wg_size}', String(SCATTER_WG_SIZE));\n\n    const shader = device.createShaderModule({ label: 'Radix sort shader', code: shader_code });\n\n    instance.zero_p = device.createComputePipeline({\n      label: 'Zero the histograms',\n      layout: pipeline_layout,\n      compute: { module: shader, entryPoint: 'zero_histograms' }\n    });\n    instance.histogram_p = device.createComputePipeline({\n      label: 'calculate_histogram',\n      layout: pipeline_layout,\n      compute: { module: shader, entryPoint: 'calculate_histogram' }\n    });\n    instance.prefix_p = device.createComputePipeline({\n      label: 'prefix_histogram',\n      layout: pipeline_layout,\n      compute: { module: shader, entryPoint: 'prefix_histogram' }\n    });\n    instance.scatter_even_p = device.createComputePipeline({\n      label: 'scatter_even',\n      layout: pipeline_layout,\n      compute: { module: shader, entryPoint: 'scatter_even' }\n    });\n    instance.scatter_odd_p = device.createComputePipeline({\n      label: 'scatter_odd',\n      layout: pipeline_layout,\n      compute: { module: shader, entryPoint: 'scatter_odd' }\n    });\n\n    instance.subgroup_size = histogram_sg_size;\n    return instance;\n  }\n\n  // ---- Public layout helpers (associated functions in Rust) ----\n  static bindGroupLayouts(device: GPUDevice): GPUBindGroupLayout {\n    return device.createBindGroupLayout({\n      label: 'Radix bind group layout',\n      entries: [\n        { binding: 0, visibility: GPUShaderStage.COMPUTE, buffer: { type: 'storage' } }, // general infos\n        { binding: 1, visibility: GPUShaderStage.COMPUTE, buffer: { type: 'storage' } }, // internal mem\n        { binding: 2, visibility: GPUShaderStage.COMPUTE, buffer: { type: 'storage' } }, // keyval_a\n        { binding: 3, visibility: GPUShaderStage.COMPUTE, buffer: { type: 'storage' } }, // keyval_b\n        { binding: 4, visibility: GPUShaderStage.COMPUTE, buffer: { type: 'storage' } }, // payload_a\n        { binding: 5, visibility: GPUShaderStage.COMPUTE, buffer: { type: 'storage' } }, // payload_b\n      ]\n    });\n  }\n\n  static bindGroupLayoutPreprocess(device: GPUDevice): GPUBindGroupLayout {\n    return device.createBindGroupLayout({\n      label: 'Radix bind group layout for preprocess pipeline',\n      entries: [\n        { binding: 0, visibility: GPUShaderStage.COMPUTE, buffer: { type: 'storage' } }, // general infos\n        { binding: 1, visibility: GPUShaderStage.COMPUTE, buffer: { type: 'storage' } }, // keyval_a\n        { binding: 2, visibility: GPUShaderStage.COMPUTE, buffer: { type: 'storage' } }, // payload_a\n        { binding: 3, visibility: GPUShaderStage.COMPUTE, buffer: { type: 'storage' } }, // dispatch\n      ]\n    });\n  }\n\n  static bindGroupLayoutRendering(device: GPUDevice): GPUBindGroupLayout {\n    return device.createBindGroupLayout({\n      label: 'Radix bind group layout (render)',\n      entries: [\n        { binding: 0, visibility: GPUShaderStage.COMPUTE | GPUShaderStage.VERTEX, buffer: { type: 'read-only-storage' } }, // general infos\n        { binding: 4, visibility: GPUShaderStage.COMPUTE | GPUShaderStage.VERTEX, buffer: { type: 'read-only-storage' } }, // payload_a (indices)\n      ]\n    });\n  }\n\n  // ---- Public API: allocate per-pointcloud resources (create_sort_stuff) ----\n  createSortStuff(device: GPUDevice, numPoints: number): PointCloudSortStuff {\n    const [keyval_a, keyval_b, payload_a, payload_b] = GPURSSorter.createKeyvalBuffers(device, numPoints, 4);\n    const sorter_int = this.createInternalMemBuffer(device, numPoints);\n    const [sorter_uni, sorter_dis, sorter_bg] = this.createBindGroup(\n      device, numPoints, sorter_int, keyval_a, keyval_b, payload_a, payload_b\n    );\n    const sorter_render_bg = this.createBindGroupRender(device, sorter_uni, payload_a);\n    const sorter_bg_pre = this.createBindGroupPreprocess(device, sorter_uni, sorter_dis, keyval_a, payload_a);\n\n    return {\n      numPoints,\n      sorterUni: sorter_uni,\n      sorterDis: sorter_dis,\n      sorterBg: sorter_bg,\n      sorterRenderBg: sorter_render_bg,\n      sorterBgPre: sorter_bg_pre,\n    };\n  }\n\n  // ---- Internal helpers from Rust ----\n  private static getScatterHistogramSizes(keysize: number): [number, number, number, number, number, number] {\n    const scatter_block_kvs = HISTOGRAM_WG_SIZE * RS_SCATTER_BLOCK_ROWS;\n    const scatter_blocks_ru = Math.floor((keysize + scatter_block_kvs - 1) / scatter_block_kvs);\n    const count_ru_scatter = scatter_blocks_ru * scatter_block_kvs;\n\n    const histo_block_kvs = HISTOGRAM_WG_SIZE * RS_HISTOGRAM_BLOCK_ROWS;\n    const histo_blocks_ru = Math.floor((count_ru_scatter + histo_block_kvs - 1) / histo_block_kvs);\n    const count_ru_histo = histo_blocks_ru * histo_block_kvs;\n\n    return [\n      scatter_block_kvs,\n      scatter_blocks_ru,\n      count_ru_scatter,\n      histo_block_kvs,\n      histo_blocks_ru,\n      count_ru_histo\n    ];\n  }\n\n  static createKeyvalBuffers(\n    device: GPUDevice,\n    keysize: number,\n    bytesPerPayloadElem: number\n  ): [GPUBuffer, GPUBuffer, GPUBuffer, GPUBuffer] {\n    const keysPerWG = HISTOGRAM_WG_SIZE * RS_HISTOGRAM_BLOCK_ROWS;\n    const countRuHisto = (Math.floor((keysize + keysPerWG) / keysPerWG) + 1) * keysPerWG;\n\n    const keyBytes = countRuHisto * 4; // f32\n    const buffer_a = device.createBuffer({\n      label: 'Radix data buffer a',\n      size: keyBytes,\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST | GPUBufferUsage.COPY_SRC\n    });\n    const buffer_b = device.createBuffer({\n      label: 'Radix data buffer b',\n      size: keyBytes,\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST | GPUBufferUsage.COPY_SRC\n    });\n\n    if (bytesPerPayloadElem !== 4) throw new Error('Only 4-byte payload elements supported');\n    const payloadSize = Math.max(keysize * bytesPerPayloadElem, 1);\n    const payload_a = device.createBuffer({\n      label: 'Radix payload buffer a',\n      size: payloadSize,\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST | GPUBufferUsage.COPY_SRC\n    });\n    const payload_b = device.createBuffer({\n      label: 'Radix payload buffer b',\n      size: payloadSize,\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST | GPUBufferUsage.COPY_SRC\n    });\n    return [buffer_a, buffer_b, payload_a, payload_b];\n  }\n\n  createInternalMemBuffer(device: GPUDevice, keysize: number): GPUBuffer {\n    // Layout:\n    // histograms[keyval_size] |\n    // partitions[scatter_blocks_ru-1] |\n    // workgroup_ids[keyval_size]\n    // Size computed like Rust:\n    const [, scatter_blocks_ru] = GPURSSorter.getScatterHistogramSizes(keysize);\n    const histo_size = RS_RADIX_SIZE * 4; // u32\n    const internal_size = (RS_KEYVAL_SIZE + scatter_blocks_ru - 1 + 1) * histo_size;\n\n    return device.createBuffer({\n      label: 'Internal radix sort buffer',\n      size: internal_size,\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST | GPUBufferUsage.COPY_SRC\n    });\n  }\n\n  createBindGroup(\n    device: GPUDevice,\n    keysize: number,\n    internal_mem_buffer: GPUBuffer,\n    keyval_a: GPUBuffer,\n    keyval_b: GPUBuffer,\n    payload_a: GPUBuffer,\n    payload_b: GPUBuffer\n  ): [GPUBuffer, GPUBuffer, GPUBindGroup] {\n    const [, scatter_blocks_ru, , , , count_ru_histo] = GPURSSorter.getScatterHistogramSizes(keysize);\n\n    const dispatch_infos: IndirectDispatch = {\n      dispatch_x: scatter_blocks_ru >>> 0,\n      dispatch_y: 1,\n      dispatch_z: 1\n    };\n    const uniform_infos: GeneralInfo = {\n      keys_size: keysize >>> 0,\n      padded_size: count_ru_histo >>> 0,\n      passes: 4,\n      even_pass: 0,\n      odd_pass: 0\n    };\n\n    const uniform_buffer = device.createBuffer({\n      label: 'Radix uniform buffer',\n      size: 20,\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST | GPUBufferUsage.COPY_SRC\n    });\n\n    {\n        const bytes = writeGeneralInfo(uniform_infos);            // Uint8Array\n        device.queue.writeBuffer(\n          uniform_buffer,\n          0,\n          bytes.buffer as ArrayBuffer,                             // <-- pass ArrayBuffer\n          bytes.byteOffset,\n          bytes.byteLength\n        );\n      }\n\n    const dispatch_buffer = device.createBuffer({\n      label: 'Dispatch indirect buffer',\n      size: 12,\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST | GPUBufferUsage.INDIRECT\n    });\n    \n    {\n        const bytes = writeIndirectDispatch(dispatch_infos);\n        device.queue.writeBuffer(\n            dispatch_buffer,                                    // your buffer at 381\n          0,\n          bytes.buffer as ArrayBuffer,\n          bytes.byteOffset,\n          bytes.byteLength\n        );\n    }\n\n    const bind_group = device.createBindGroup({\n      label: 'Radix bind group',\n      layout: this.bind_group_layout,\n      entries: [\n        { binding: 0, resource: { buffer: uniform_buffer } },\n        { binding: 1, resource: { buffer: internal_mem_buffer } },\n        { binding: 2, resource: { buffer: keyval_a } },\n        { binding: 3, resource: { buffer: keyval_b } },\n        { binding: 4, resource: { buffer: payload_a } },\n        { binding: 5, resource: { buffer: payload_b } }\n      ]\n    });\n\n    return [uniform_buffer, dispatch_buffer, bind_group];\n  }\n\n  createBindGroupRender(device: GPUDevice, general_infos: GPUBuffer, payload_a: GPUBuffer): GPUBindGroup {\n    return device.createBindGroup({\n      label: 'Render bind group',\n      layout: this.render_bind_group_layout,\n      entries: [\n        { binding: 0, resource: { buffer: general_infos } },\n        { binding: 4, resource: { buffer: payload_a } }\n      ]\n    });\n  }\n\n  createBindGroupPreprocess(\n    device: GPUDevice,\n    uniform_buffer: GPUBuffer,\n    dispatch_buffer: GPUBuffer,\n    keyval_a: GPUBuffer,\n    payload_a: GPUBuffer\n  ): GPUBindGroup {\n    return device.createBindGroup({\n      label: 'Preprocess bind group',\n      layout: this.preprocess_bind_group_layout,\n      entries: [\n        { binding: 0, resource: { buffer: uniform_buffer } },\n        { binding: 1, resource: { buffer: keyval_a } },\n        { binding: 2, resource: { buffer: payload_a } },\n        { binding: 3, resource: { buffer: dispatch_buffer } }\n      ]\n    });\n  }\n\n  // ---- \u201CStatic\u201D helper in Rust \u2014 keep as static here too ----\n  static recordResetIndirectBuffer(indirect_buffer: GPUBuffer, uniform_buffer: GPUBuffer, queue: GPUQueue): void {\n    const zero4 = new Uint8Array([0, 0, 0, 0]);\n    queue.writeBuffer(indirect_buffer, 0, zero4); // dispatch_x = 0\n    queue.writeBuffer(uniform_buffer, 0, zero4);  // keys_size = 0\n  }\n\n  // ---- Recorders (compute passes) ----\n  record_calculate_histogram(bind_group: GPUBindGroup, keysize: number, encoder: GPUCommandEncoder): void {\n    const [, , , , hist_blocks_ru] = GPURSSorter.getScatterHistogramSizes(keysize);\n\n    {\n      const pass = encoder.beginComputePass({ label: 'zeroing the histogram' });\n      pass.setPipeline(this.zero_p);\n      pass.setBindGroup(0, bind_group);\n      pass.dispatchWorkgroups(hist_blocks_ru, 1, 1);\n      pass.end();\n    }\n    {\n      const pass = encoder.beginComputePass({ label: 'calculate histogram' });\n      pass.setPipeline(this.histogram_p);\n      pass.setBindGroup(0, bind_group);\n      pass.dispatchWorkgroups(hist_blocks_ru, 1, 1);\n      pass.end();\n    }\n  }\n\n  record_calculate_histogram_indirect(bind_group: GPUBindGroup, dispatch_buffer: GPUBuffer, encoder: GPUCommandEncoder): void {\n    {\n      const pass = encoder.beginComputePass({ label: 'zeroing the histogram' });\n      pass.setPipeline(this.zero_p);\n      pass.setBindGroup(0, bind_group);\n      pass.dispatchWorkgroupsIndirect(dispatch_buffer, 0);\n      pass.end();\n    }\n    {\n      const pass = encoder.beginComputePass({ label: 'calculate histogram' });\n      pass.setPipeline(this.histogram_p);\n      pass.setBindGroup(0, bind_group);\n      pass.dispatchWorkgroupsIndirect(dispatch_buffer, 0);\n      pass.end();\n    }\n  }\n\n  // There is no indirect prefix step \u2014 number of prefixes depends on passes (4).\n  record_prefix_histogram(bind_group: GPUBindGroup, passes: number, encoder: GPUCommandEncoder): void {\n    const pass = encoder.beginComputePass({ label: 'prefix histogram' });\n    pass.setPipeline(this.prefix_p);\n    pass.setBindGroup(0, bind_group);\n    pass.dispatchWorkgroups(passes, 1, 1);\n    pass.end();\n  }\n\n  record_scatter_keys(bind_group: GPUBindGroup, passes: number, keysize: number, encoder: GPUCommandEncoder): void {\n    if (passes !== 4) throw new Error('passes must be 4');\n    const [, scatter_blocks_ru] = GPURSSorter.getScatterHistogramSizes(keysize);\n\n    const pass = encoder.beginComputePass({ label: 'Scatter keyvals' });\n    pass.setBindGroup(0, bind_group);\n\n    pass.setPipeline(this.scatter_even_p);\n    pass.dispatchWorkgroups(scatter_blocks_ru, 1, 1);\n\n    pass.setPipeline(this.scatter_odd_p);\n    pass.dispatchWorkgroups(scatter_blocks_ru, 1, 1);\n\n    pass.setPipeline(this.scatter_even_p);\n    pass.dispatchWorkgroups(scatter_blocks_ru, 1, 1);\n\n    pass.setPipeline(this.scatter_odd_p);\n    pass.dispatchWorkgroups(scatter_blocks_ru, 1, 1);\n\n    pass.end();\n  }\n\n  record_scatter_keys_indirect(bind_group: GPUBindGroup, passes: number, dispatch_buffer: GPUBuffer, encoder: GPUCommandEncoder): void {\n    if (passes !== 4) throw new Error('passes must be 4');\n\n    const pass = encoder.beginComputePass({ label: 'Scatter keyvals' });\n    pass.setBindGroup(0, bind_group);\n\n    pass.setPipeline(this.scatter_even_p);\n    pass.dispatchWorkgroupsIndirect(dispatch_buffer, 0);\n\n    pass.setPipeline(this.scatter_odd_p);\n    pass.dispatchWorkgroupsIndirect(dispatch_buffer, 0);\n\n    pass.setPipeline(this.scatter_even_p);\n    pass.dispatchWorkgroupsIndirect(dispatch_buffer, 0);\n\n    pass.setPipeline(this.scatter_odd_p);\n    pass.dispatchWorkgroupsIndirect(dispatch_buffer, 0);\n\n    pass.end();\n  }\n\n  record_sort(bind_group: GPUBindGroup, keysize: number, encoder: GPUCommandEncoder): void {\n    this.record_calculate_histogram(bind_group, keysize, encoder);\n    this.record_prefix_histogram(bind_group, 4, encoder);\n    this.record_scatter_keys(bind_group, 4, keysize, encoder);\n  }\n\n  recordSortIndirect(bind_group: GPUBindGroup, dispatch_buffer: GPUBuffer, encoder: GPUCommandEncoder): void {\n    this.record_calculate_histogram_indirect(bind_group, dispatch_buffer, encoder);\n    this.record_prefix_histogram(bind_group, 4, encoder);\n    this.record_scatter_keys_indirect(bind_group, 4, dispatch_buffer, encoder);\n  }\n\n  // ---- Small self-check used during subgroup-size probing (mirrors test_sort) ----\n  private async test_sort(device: GPUDevice, queue: GPUQueue): Promise<boolean> {\n    const n = 8192;\n    const scrambled = new Float32Array(n);\n    for (let i = 0; i < n; i++) scrambled[i] = (n - 1 - i);\n\n    const internal_mem_buffer = this.createInternalMemBuffer(device, n);\n    const [keyval_a, keyval_b, payload_a, payload_b] = GPURSSorter.createKeyvalBuffers(device, n, 4);\n    const [uniform_buffer, dispatch_buffer, bind_group] = this.createBindGroup(\n      device, n, internal_mem_buffer, keyval_a, keyval_b, payload_a, payload_b\n    );\n\n    // upload keys into keyval_a\n    queue.writeBuffer(keyval_a, 0, scrambled.buffer);\n\n    const encoder = device.createCommandEncoder({ label: 'GPURSSorter test_sort' });\n    this.record_sort(bind_group, n, encoder);\n    queue.submit([encoder.finish()]);\n    await queue.onSubmittedWorkDone();\n\n    const sorted = await downloadBufferF32(device, queue, keyval_a, n);\n    for (let i = 0; i < n; i++) {\n      if (sorted[i] !== i) return false;\n    }\n    // cleanup (optional in browser)\n    uniform_buffer.destroy(); dispatch_buffer.destroy(); internal_mem_buffer.destroy();\n    keyval_a.destroy(); keyval_b.destroy(); payload_a.destroy(); payload_b.destroy();\n    return true;\n  }\n}\n\n// ===== Map-read helper (Float32) =====\nasync function downloadBufferF32(device: GPUDevice, queue: GPUQueue, src: GPUBuffer, count: number): Promise<Float32Array> {\n  const byteLength = count * 4;\n  const dst = device.createBuffer({\n    label: 'Download buffer',\n    size: byteLength,\n    usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST\n  });\n  const encoder = device.createCommandEncoder({ label: 'Copy encoder' });\n  encoder.copyBufferToBuffer(src, 0, dst, 0, byteLength);\n  queue.submit([encoder.finish()]);\n  await queue.onSubmittedWorkDone();\n\n  await dst.mapAsync(GPUMapMode.READ);\n  const copy = dst.getMappedRange().slice(0);\n  dst.unmap();\n  dst.destroy();\n  return new Float32Array(copy);\n}\n", "// renderer.ts\nimport { mat4, vec2, vec4 } from 'gl-matrix';\nimport { Camera, PerspectiveCamera, VIEWPORT_Y_FLIP } from './camera';\nimport { PointCloud } from './pointcloud';\nimport { UniformBuffer } from './uniform';\nimport { GPUStopwatch } from './utils';\nimport { GPURSSorter, PointCloudSortStuff } from './gpu_rs';\n\n/* -------------------------- global logging gate -------------------------- */\n// Ensure a single, shared flag exists even if this module loads first/last.\nconst __g = globalThis as any;\nif (typeof __g.__LOGGING_ENABLED__ === 'undefined') {\n  __g.__LOGGING_ENABLED__ = true;\n}\nfunction loggingEnabled(): boolean {\n  return !!(globalThis as any).__LOGGING_ENABLED__;\n}\n\n/* -------------------------- logging + helpers -------------------------- */\n\nfunction logi(tag: string, msg: string, extra?: any) {\n  if (!loggingEnabled()) return;\n  if (extra !== undefined) {\n    console.log(`${tag} ${msg}`, extra);\n  } else {\n    console.log(`${tag} ${msg}`);\n  }\n}\n\nfunction fmtF32Slice(a: ArrayLike<number>): string {\n  const out: string[] = [];\n  const n = a.length;\n  for (let i = 0; i < n; i++) out.push((a[i] as number).toFixed(7));\n  return `[${out.join(',')}]`;\n}\n\n// FNV-1a 64-bit\nfunction hashBytesU64(bytes: ArrayBufferView): string {\n  let h = 0xcbf29ce484222325n;\n  const prime = 0x100000001b3n;\n  const u8 =\n    bytes instanceof Uint8Array\n      ? bytes\n      : new Uint8Array(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n  for (let i = 0; i < u8.length; i++) {\n    h ^= BigInt(u8[i]);\n    h = (h * prime) & 0xffffffffffffffffn;\n  }\n  return h.toString(16).padStart(16, '0');\n}\n\nfunction mat4ColMajorToArray(m: mat4): Float32Array {\n  // gl-matrix stores column-major in a Float32Array already\n  return new Float32Array(m);\n}\n\n/* -------------------------- debug readback + dumps -------------------------- */\n\nconst DEBUG_READBACK_EVERY_N_FRAMES = 1; // set to 0 to disable\n\nfunction u8ToU32LE(u8: Uint8Array): Uint32Array {\n  const n = Math.floor(u8.byteLength / 4);\n  return new Uint32Array(u8.buffer, u8.byteOffset, n);\n}\nfunction u8ToF32(u8: Uint8Array): Float32Array {\n  const n = Math.floor(u8.byteLength / 4);\n  return new Float32Array(u8.buffer, u8.byteOffset, n);\n}\nfunction dumpU32(label: string, u8: Uint8Array) {\n  if (!loggingEnabled()) return;\n  const u32 = u8ToU32LE(u8);\n  console.log(label, Array.from(u32));\n}\n\nasync function readbackBuffer(\n  device: GPUDevice,\n  src: GPUBuffer,\n  size: number\n): Promise<ArrayBuffer> {\n  // copy into a MAP_READ buffer and submit immediately\n  const rb = device.createBuffer({\n    size: (size + 255) & ~255, // 256 alignment\n    usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ\n  });\n  const enc = device.createCommandEncoder({ label: 'rb-encoder' });\n  enc.copyBufferToBuffer(src, 0, rb, 0, size);\n  device.queue.submit([enc.finish()]);\n  await rb.mapAsync(GPUMapMode.READ);\n  const slice = rb.getMappedRange().slice(0, size);\n  rb.unmap();\n  return slice;\n}\n\n/* ========================= CameraUniform ========================= */\n\nexport class CameraUniform {\n  public viewMatrix: mat4;\n  public viewInvMatrix: mat4;\n  public projMatrix: mat4;\n  public projInvMatrix: mat4;\n  public viewport: vec2;\n  public focal: vec2;\n\n  constructor() {\n    this.viewMatrix = mat4.create();\n    this.viewInvMatrix = mat4.create();\n    this.projMatrix = mat4.create();\n    this.projInvMatrix = mat4.create();\n    this.viewport = vec2.fromValues(1, 1);\n    this.focal = vec2.fromValues(1, 1);\n  }\n\n  setViewMat(viewMatrix: mat4): void {\n    mat4.copy(this.viewMatrix, viewMatrix);\n    mat4.invert(this.viewInvMatrix, viewMatrix);\n  }\n\n  setProjMat(projMatrix: mat4): void {\n    const flipped = mat4.create();\n    mat4.multiply(flipped, VIEWPORT_Y_FLIP, projMatrix);\n    mat4.copy(this.projMatrix, flipped);\n    mat4.invert(this.projInvMatrix, projMatrix);\n  }\n\n  setCamera(camera: Camera): void {\n    this.setProjMat(camera.projMatrix());\n    this.setViewMat(camera.viewMatrix());\n  }\n\n  setViewport(viewport: vec2): void {\n    vec2.copy(this.viewport, viewport);\n  }\n\n  setFocal(focal: vec2): void {\n    vec2.copy(this.focal, focal);\n  }\n}\n\n/* ========================= SplattingArgs ========================= */\n\nexport interface SplattingArgs {\n  camera: PerspectiveCamera;\n  viewport: vec2;\n  gaussianScaling: number;\n  maxShDeg: number;\n  showEnvMap: boolean;\n  mipSplatting?: boolean;\n  kernelSize?: number;\n  clippingBox?: {\n    min: { x: number; y: number; z: number };\n    max: { x: number; y: number; z: number };\n  };\n  walltime: number; // seconds\n  sceneCenter?: [number, number, number];\n  sceneExtend?: number;\n  backgroundColor: GPUColor;\n  resolution: vec2;\n}\n\nexport const DEFAULT_KERNEL_SIZE = 0.3;\n\n/* ========================= SplattingArgsUniform ========================= */\n\nexport class SplattingArgsUniform {\n  public clippingBoxMin: vec4;\n  public clippingBoxMax: vec4;\n  public gaussianScaling: number;\n  public maxShDeg: number;\n  public showEnvMap: number;\n  public mipSplatting: number;\n\n  public kernelSize: number;\n  public walltime: number;\n  public sceneExtend: number;\n  public _pad: number;\n\n  public sceneCenter: vec4;\n\n  constructor() {\n    this.gaussianScaling = 1.0;\n    this.maxShDeg = 3;\n    this.showEnvMap = 1;\n    this.mipSplatting = 0;\n\n    this.kernelSize = DEFAULT_KERNEL_SIZE;\n    this.walltime = 0.0;\n    this.sceneExtend = 1.0;\n    this._pad = 0;\n\n    this.clippingBoxMin = vec4.fromValues(\n      Number.NEGATIVE_INFINITY,\n      Number.NEGATIVE_INFINITY,\n      Number.NEGATIVE_INFINITY,\n      0.0\n    );\n    this.clippingBoxMax = vec4.fromValues(\n      Number.POSITIVE_INFINITY,\n      Number.POSITIVE_INFINITY,\n      Number.POSITIVE_INFINITY,\n      0.0\n    );\n    this.sceneCenter = vec4.fromValues(0, 0, 0, 0);\n  }\n\n  static fromArgsAndPc(args: SplattingArgs, pc: PointCloud): SplattingArgsUniform {\n    const u = new SplattingArgsUniform();\n    u.gaussianScaling = args.gaussianScaling;\n    u.maxShDeg = args.maxShDeg;\n    u.showEnvMap = args.showEnvMap ? 1 : 0;\n\n    const pcMip = pc.mipSplatting() ?? false;\n    u.mipSplatting = (args.mipSplatting ?? pcMip) ? 1 : 0;\n\n    const pcKernel = pc.dilationKernelSize() ?? DEFAULT_KERNEL_SIZE;\n    u.kernelSize = args.kernelSize ?? pcKernel;\n\n    const bbox = pc.bbox();\n    const clip = (args.clippingBox ?? bbox) as any;\n    vec4.set(u.clippingBoxMin, clip.min.x, clip.min.y, clip.min.z, 0.0);\n    vec4.set(u.clippingBoxMax, clip.max.x, clip.max.y, clip.max.z, 0.0);\n\n    u.walltime = args.walltime;\n\n    const c = pc.center();\n    vec4.set(u.sceneCenter, c.x, c.y, c.z, 0.0);\n\n    const minExtend = bbox.radius();\n    u.sceneExtend = Math.max(args.sceneExtend ?? minExtend, minExtend);\n\n    return u;\n  }\n}\n\n/* ========================= PreprocessPipeline ========================= */\n\nclass PreprocessPipeline {\n  private pipeline!: GPUComputePipeline;\n  private cameraLayout: GPUBindGroupLayout;\n  private pcLayout: GPUBindGroupLayout;\n  private sortPreLayout: GPUBindGroupLayout;\n  private settingsLayout: GPUBindGroupLayout;\n\n  private constructor(\n    cameraLayout: GPUBindGroupLayout,\n    pcLayout: GPUBindGroupLayout,\n    sortPreLayout: GPUBindGroupLayout,\n    settingsLayout: GPUBindGroupLayout\n  ) {\n    this.cameraLayout = cameraLayout;\n    this.pcLayout = pcLayout;\n    this.sortPreLayout = sortPreLayout;\n    this.settingsLayout = settingsLayout;\n  }\n\n  static async create(\n    device: GPUDevice,\n    shDeg: number,\n    compressed: boolean,\n    sortPreLayout: GPUBindGroupLayout\n  ): Promise<PreprocessPipeline> {\n    const cameraLayout = UniformBuffer.bind_group_layout(device); // group(0)\n    const pcLayout = compressed\n      ? PointCloud.bind_group_layout_compressed(device) // group(1)\n      : PointCloud.bind_group_layout(device);\n    const settingsLayout = UniformBuffer.bind_group_layout(device); // group(3)\n\n    const self = new PreprocessPipeline(\n      cameraLayout,\n      pcLayout,\n      sortPreLayout,\n      settingsLayout\n    );\n\n    const wgslPath = compressed\n      ? './shaders/preprocess_compressed.wgsl'\n      : './shaders/preprocess.wgsl';\n    const src = await (await fetch(wgslPath)).text();\n    const code = `const MAX_SH_DEG : u32 = ${shDeg}u;\\n${src}`;\n    const module = device.createShaderModule({\n      label: 'preprocess shader',\n      code\n    });\n\n    const pipelineLayout = device.createPipelineLayout({\n      label: 'preprocess pipeline layout',\n      bindGroupLayouts: [\n        self.cameraLayout,\n        self.pcLayout,\n        self.sortPreLayout,\n        self.settingsLayout\n      ]\n    });\n\n    self.pipeline = device.createComputePipeline({\n      label: 'preprocess pipeline',\n      layout: pipelineLayout,\n      compute: { module, entryPoint: 'preprocess' }\n    });\n\n    logi('[preprocess::new]', `sh_deg=${shDeg}, compressed=${compressed}`);\n    return self;\n  }\n\n  run(\n    encoder: GPUCommandEncoder,\n    pc: PointCloud,\n    cameraBG: GPUBindGroup,\n    sortPreBG: GPUBindGroup,\n    settingsBG: GPUBindGroup\n  ): void {\n    const wgsX = Math.ceil(pc.numPoints() / 256);\n    logi('[preprocess::run]', `dispatch_x=${wgsX}, num_points=${pc.numPoints()}`);\n    const pass = encoder.beginComputePass({ label: 'preprocess compute pass' });\n    pass.setPipeline(this.pipeline);\n    pass.setBindGroup(0, cameraBG);\n    pass.setBindGroup(1, pc.getBindGroup());\n    pass.setBindGroup(2, sortPreBG);\n    pass.setBindGroup(3, settingsBG);\n    pass.dispatchWorkgroups(wgsX, 1, 1);\n    pass.end();\n  }\n}\n\n/* ========================= Display ========================= */\n\nexport class Display {\n  private pipeline: GPURenderPipeline;\n  private bindGroup: GPUBindGroup;\n  private format: GPUTextureFormat;\n  private view: GPUTextureView;\n  private envBg: GPUBindGroup;\n  private hasEnvMap: boolean;\n\n  private constructor(\n    pipeline: GPURenderPipeline,\n    format: GPUTextureFormat,\n    view: GPUTextureView,\n    bindGroup: GPUBindGroup,\n    envBg: GPUBindGroup\n  ) {\n    this.pipeline = pipeline;\n    this.format = format;\n    this.view = view;\n    this.bindGroup = bindGroup;\n    this.envBg = envBg;\n    this.hasEnvMap = false;\n  }\n\n  static envMapBindGroupLayout(device: GPUDevice): GPUBindGroupLayout {\n    return device.createBindGroupLayout({\n      label: 'env map bind group layout',\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.FRAGMENT,\n          texture: { sampleType: 'float', viewDimension: '2d' }\n        },\n        {\n          binding: 1,\n          visibility: GPUShaderStage.FRAGMENT,\n          sampler: { type: 'filtering' }\n        }\n      ]\n    });\n  }\n\n  static bindGroupLayout(device: GPUDevice): GPUBindGroupLayout {\n    return device.createBindGroupLayout({\n      label: 'display bind group layout',\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.FRAGMENT,\n          texture: { sampleType: 'float', viewDimension: '2d' }\n        },\n        {\n          binding: 1,\n          visibility: GPUShaderStage.FRAGMENT,\n          sampler: { type: 'filtering' }\n        }\n      ]\n    });\n  }\n\n  static createEnvMapBg(\n    device: GPUDevice,\n    envTexture: GPUTextureView | null\n  ): GPUBindGroup {\n    const placeholderTexture = device\n      .createTexture({\n        label: 'placeholder',\n        size: { width: 1, height: 1 },\n        format: 'rgba16float',\n        usage: GPUTextureUsage.TEXTURE_BINDING\n      })\n      .createView();\n    const textureView = envTexture ?? placeholderTexture;\n    const sampler = device.createSampler({\n      label: 'env map sampler',\n      magFilter: 'linear',\n      minFilter: 'linear'\n    });\n    return device.createBindGroup({\n      label: 'env map bind group',\n      layout: Display.envMapBindGroupLayout(device),\n      entries: [\n        { binding: 0, resource: textureView },\n        { binding: 1, resource: sampler }\n      ]\n    });\n  }\n\n  static createRenderTarget(\n    device: GPUDevice,\n    format: GPUTextureFormat,\n    width: number,\n    height: number\n  ): [GPUTextureView, GPUBindGroup] {\n    const texture = device.createTexture({\n      label: 'display render image',\n      size: { width, height },\n      format,\n      usage:\n        GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.RENDER_ATTACHMENT\n    });\n    const textureView = texture.createView();\n    const sampler = device.createSampler({ magFilter: 'linear', minFilter: 'linear' });\n    const bindGroup = device.createBindGroup({\n      label: 'render target bind group',\n      layout: Display.bindGroupLayout(device),\n      entries: [\n        { binding: 0, resource: textureView },\n        { binding: 1, resource: sampler }\n      ]\n    });\n    return [textureView, bindGroup];\n  }\n\n  static async create(\n    device: GPUDevice,\n    sourceFormat: GPUTextureFormat,\n    targetFormat: GPUTextureFormat,\n    width: number,\n    height: number\n  ): Promise<Display> {\n    const pipelineLayout = device.createPipelineLayout({\n      label: 'display pipeline layout',\n      bindGroupLayouts: [\n        Display.bindGroupLayout(device),\n        Display.envMapBindGroupLayout(device),\n        UniformBuffer.bind_group_layout(device),\n        UniformBuffer.bind_group_layout(device)\n      ]\n    });\n\n    const displaySrc = await (await fetch('./shaders/display.wgsl')).text();\n    const module = device.createShaderModule({\n      label: 'display shader',\n      code: displaySrc\n    });\n\n    const pipeline = device.createRenderPipeline({\n      label: 'display pipeline',\n      layout: pipelineLayout,\n      vertex: { module, entryPoint: 'vs_main' },\n      fragment: {\n        module,\n        entryPoint: 'fs_main',\n        targets: [\n          {\n            format: targetFormat,\n            blend: {\n              color: {\n                srcFactor: 'one',\n                dstFactor: 'one-minus-src-alpha',\n                operation: 'add'\n              },\n              alpha: {\n                srcFactor: 'one',\n                dstFactor: 'one-minus-src-alpha',\n                operation: 'add'\n              }\n            },\n            writeMask: GPUColorWrite.ALL\n          }\n        ]\n      },\n      primitive: { topology: 'triangle-strip' }\n    });\n\n    const envBg = Display.createEnvMapBg(device, null);\n    const [view, bindGroup] = Display.createRenderTarget(\n      device,\n      sourceFormat,\n      width,\n      height\n    );\n    logi('[display::new]', `render_target ${width}x${height} format=${sourceFormat}`);\n    return new Display(pipeline, sourceFormat, view, bindGroup, envBg);\n  }\n\n  texture(): GPUTextureView {\n    return this.view;\n  }\n\n  setEnvMap(device: GPUDevice, envTexture: GPUTextureView | null): void {\n    this.envBg = Display.createEnvMapBg(device, envTexture);\n    this.hasEnvMap = envTexture !== null;\n    logi('[display]', `set_env_map present=${this.hasEnvMap}`);\n  }\n\n  hasEnvMapSet(): boolean {\n    return this.hasEnvMap;\n  }\n\n  resize(device: GPUDevice, width: number, height: number): void {\n    const [view, bindGroup] = Display.createRenderTarget(\n      device,\n      this.format,\n      width,\n      height\n    );\n    this.bindGroup = bindGroup;\n    this.view = view;\n    logi('[display]', `resize to ${width}x${height}`);\n  }\n\n  render(\n    encoder: GPUCommandEncoder,\n    target: GPUTextureView,\n    backgroundColor: GPUColor,\n    camera: GPUBindGroup,\n    renderSettings: GPUBindGroup\n  ): void {\n    const pass = encoder.beginRenderPass({\n      label: 'render pass',\n      colorAttachments: [\n        {\n          view: target,\n          clearValue: backgroundColor,\n          loadOp: 'clear',\n          storeOp: 'store'\n        }\n      ]\n    });\n    pass.setBindGroup(0, this.bindGroup);\n    pass.setBindGroup(1, this.envBg);\n    pass.setBindGroup(2, camera);\n    pass.setBindGroup(3, renderSettings);\n    pass.setPipeline(this.pipeline);\n    pass.draw(4, 1);\n    pass.end();\n  }\n}\n\n/* ========================= GaussianRenderer ========================= */\n\nexport class GaussianRenderer {\n  private pipeline: GPURenderPipeline;\n  private cameraUB: UniformBuffer<ArrayBufferView>;\n  private settingsUB: UniformBuffer<ArrayBufferView>;\n  private preprocess: PreprocessPipeline;\n\n  private drawIndirectBuffer: GPUBuffer;\n  private drawIndirect: GPUBindGroup;\n\n  private _colorFormat: GPUTextureFormat;\n\n  private sorter: GPURSSorter;\n  private sorterStuff: PointCloudSortStuff | null = null;\n\n  private renderSorterLayout: GPUBindGroupLayout;\n  private sortPreLayout: GPUBindGroupLayout;\n\n  // reuse buffers for serialization\n  private _cu = new CameraUniform();\n  private _camBuf = new ArrayBuffer(68 * 4); // 68 f32\n  private _camF32 = new Float32Array(this._camBuf);\n\n  private _setBuf = new ArrayBuffer(80);\n  private _setDV = new DataView(this._setBuf);\n\n  private _indirectInitBuf = new ArrayBuffer(16);\n  private _indirectInitDV = new DataView(this._indirectInitBuf);\n\n  // frame counter for debug throttling\n  private _frameIndex = 0;\n\n  // last-hash tracking (so we only dump bytes when payload actually changes)\n  private _lastCamHash: string | null = null;\n  private _lastSetHash: string | null = null;\n\n  private constructor(\n    pipeline: GPURenderPipeline,\n    cameraUB: UniformBuffer<ArrayBufferView>,\n    settingsUB: UniformBuffer<ArrayBufferView>,\n    preprocess: PreprocessPipeline,\n    drawIndirectBuffer: GPUBuffer,\n    drawIndirect: GPUBindGroup,\n    colorFormat: GPUTextureFormat,\n    sorter: GPURSSorter,\n    renderSorterLayout: GPUBindGroupLayout,\n    sortPreLayout: GPUBindGroupLayout\n  ) {\n    this.pipeline = pipeline;\n    this.cameraUB = cameraUB;\n    this.settingsUB = settingsUB;\n    this.preprocess = preprocess;\n    this.drawIndirectBuffer = drawIndirectBuffer;\n    this.drawIndirect = drawIndirect;\n    this._colorFormat = colorFormat;\n    this.sorter = sorter;\n    this.renderSorterLayout = renderSorterLayout;\n    this.sortPreLayout = sortPreLayout;\n\n    this._indirectInitDV.setUint32(0, 4, true);\n    this._indirectInitDV.setUint32(4, 0, true);\n    this._indirectInitDV.setUint32(8, 0, true);\n    this._indirectInitDV.setUint32(12, 0, true);\n  }\n\n  public camera(): UniformBuffer<ArrayBufferView> {\n    return this.cameraUB;\n  }\n  public render_settings(): UniformBuffer<ArrayBufferView> {\n    return this.settingsUB;\n  }\n\n  static async create(\n    device: GPUDevice,\n    queue: GPUQueue,\n    colorFormat: GPUTextureFormat,\n    shDeg: number,\n    compressed: boolean\n  ): Promise<GaussianRenderer> {\n    logi(\n      '[renderer::new]',\n      `color_format=${colorFormat}, sh_deg=${shDeg}, compressed=${compressed}`\n    );\n\n    const sorter = await GPURSSorter.create(device, queue);\n\n    const pcRenderLayout = PointCloud.bind_group_layout_render(device);\n    const renderSorterLayout = GPURSSorter.bindGroupLayoutRendering(device);\n\n    const renderPipelineLayout = device.createPipelineLayout({\n      label: 'render pipeline layout',\n      bindGroupLayouts: [pcRenderLayout, renderSorterLayout]\n    });\n\n    const gaussianSrc = await (await fetch('./shaders/gaussian.wgsl')).text();\n    const gaussianModule = device.createShaderModule({\n      label: 'gaussian shader',\n      code: gaussianSrc\n    });\n\n    const pipeline = device.createRenderPipeline({\n      label: 'render pipeline',\n      layout: renderPipelineLayout,\n      vertex: { module: gaussianModule, entryPoint: 'vs_main' },\n      fragment: {\n        module: gaussianModule,\n        entryPoint: 'fs_main',\n        targets: [\n          {\n            format: colorFormat,\n            blend: {\n              color: {\n                srcFactor: 'one',\n                dstFactor: 'one-minus-src-alpha',\n                operation: 'add'\n              },\n              alpha: {\n                srcFactor: 'one',\n                dstFactor: 'one-minus-src-alpha',\n                operation: 'add'\n              }\n            },\n            writeMask: GPUColorWrite.ALL\n          }\n        ]\n      },\n      primitive: { topology: 'triangle-strip', frontFace: 'ccw' }\n    });\n\n    const drawIndirectBuffer = device.createBuffer({\n      label: 'indirect draw buffer',\n      size: 16,\n      usage:\n        GPUBufferUsage.INDIRECT |\n        GPUBufferUsage.STORAGE |\n        GPUBufferUsage.COPY_DST |\n        GPUBufferUsage.COPY_SRC\n    });\n\n    const drawIndirectLayout = GaussianRenderer.bindGroupLayout(device);\n    const drawIndirect = device.createBindGroup({\n      label: 'draw indirect buffer',\n      layout: drawIndirectLayout,\n      entries: [{ binding: 0, resource: { buffer: drawIndirectBuffer } }]\n    });\n\n    const sortPreLayout = GPURSSorter.bindGroupLayoutPreprocess(device);\n    const preprocess = await PreprocessPipeline.create(\n      device,\n      shDeg,\n      compressed,\n      sortPreLayout\n    );\n\n    const cameraUB = UniformBuffer.newDefault(\n      device,\n      'camera uniform buffer',\n      68 * 4\n    );\n    const settingsUB = UniformBuffer.newDefault(\n      device,\n      'render settings uniform buffer',\n      80\n    );\n\n    logi(\n      '[renderer::new]',\n      `buffers ready; draw_indirect.size=${drawIndirectBuffer.size} bytes`\n    );\n\n    return new GaussianRenderer(\n      pipeline,\n      cameraUB,\n      settingsUB,\n      preprocess,\n      drawIndirectBuffer,\n      drawIndirect,\n      colorFormat,\n      sorter,\n      renderSorterLayout,\n      sortPreLayout\n    );\n  }\n\n  getColorFormat(): GPUTextureFormat {\n    return this._colorFormat;\n  }\n\n  static bindGroupLayout(device: GPUDevice): GPUBindGroupLayout {\n    return device.createBindGroupLayout({\n      label: 'draw indirect',\n      entries: [\n        { binding: 0, visibility: GPUShaderStage.COMPUTE, buffer: { type: 'storage' } }\n      ]\n    });\n  }\n\n  /* ---------- serialization (match Rust struct layout) ---------- */\n\n  private serializeCameraUniform(camera: CameraUniform): Uint8Array {\n    const f32 = this._camF32;\n    f32.set(mat4ColMajorToArray(camera.viewMatrix), 0);\n    f32.set(mat4ColMajorToArray(camera.viewInvMatrix), 16);\n    f32.set(mat4ColMajorToArray(camera.projMatrix), 32);\n    f32.set(mat4ColMajorToArray(camera.projInvMatrix), 48);\n    f32[64] = camera.viewport[0];\n    f32[65] = camera.viewport[1];\n    f32[66] = camera.focal[0];\n    f32[67] = camera.focal[1];\n    return new Uint8Array(this._camBuf);\n  }\n\n  private serializeSettingsUniform(u: SplattingArgsUniform): Uint8Array {\n    const dv = this._setDV;\n    let off = 0;\n    for (let i = 0; i < 4; i++) dv.setFloat32(off + i * 4, u.clippingBoxMin[i], true);\n    off += 16;\n    for (let i = 0; i < 4; i++) dv.setFloat32(off + i * 4, u.clippingBoxMax[i], true);\n    off += 16;\n    dv.setFloat32(off, u.gaussianScaling, true);\n    off += 4;\n    dv.setUint32(off, u.maxShDeg >>> 0, true);\n    off += 4;\n    dv.setUint32(off, u.showEnvMap >>> 0, true);\n    off += 4;\n    dv.setUint32(off, u.mipSplatting >>> 0, true);\n    off += 4;\n    dv.setFloat32(off, u.kernelSize, true);\n    off += 4;\n    dv.setFloat32(off, u.walltime, true);\n    off += 4;\n    dv.setFloat32(off, u.sceneExtend, true);\n    off += 4;\n    dv.setUint32(off, 0, true); // _pad\n    off += 4;\n    for (let i = 0; i < 4; i++) dv.setFloat32(off + i * 4, u.sceneCenter[i] ?? 0, true);\n    return new Uint8Array(this._setBuf);\n  }\n\n  private writeInitialDrawIndirect(queue: GPUQueue): void {\n    queue.writeBuffer(this.drawIndirectBuffer, 0, this._indirectInitBuf);\n    logi(\n      '[preprocess]',\n      'wrote DrawIndirectArgs { vertex_count=4, instance_count=0, first_vertex=0, first_instance=0 }'\n    );\n  }\n\n  /* ---------- core steps ---------- */\n\n  private preprocessStep(\n    queue: GPUQueue,\n    pc: PointCloud,\n    renderSettings: SplattingArgs\n  ): [GPUBindGroup, GPUBindGroup] {\n    const cu = this._cu;\n\n    // Update camera uniform\n    cu.setCamera(renderSettings.camera);\n    cu.setViewport(renderSettings.viewport);\n    cu.setFocal(renderSettings.camera.projection.focal(renderSettings.viewport));\n\n    // Snapshots for logging\n    const V = mat4ColMajorToArray(cu.viewMatrix);\n    const P = mat4ColMajorToArray(cu.projMatrix);\n    const VP = new Float32Array(16);\n    {\n      const tmp = mat4.create();\n      mat4.multiply(tmp, cu.projMatrix, cu.viewMatrix);\n      VP.set(tmp);\n    }\n\n    logi(\n      '[preprocess]',\n      `viewport=${cu.viewport[0]}x${cu.viewport[1]}, focal=(${cu.focal[0]},${cu.focal[1]})`\n    );\n    logi('[preprocess]', `view=${fmtF32Slice(V)}`);\n    logi('[preprocess]', `proj=${fmtF32Slice(P)}`);\n    logi('[preprocess]', `viewProj=${fmtF32Slice(VP)}`);\n\n    const cameraBytes = this.serializeCameraUniform(cu);\n    const camHash = hashBytesU64(cameraBytes);\n    logi(\n      '[preprocess]',\n      `CameraUniform.size=${cameraBytes.byteLength} hash=${camHash}`\n    );\n    if (this._lastCamHash !== camHash) {\n      dumpU32('[preprocess] CameraUniform.bytes(u32le)=', cameraBytes);\n      this._lastCamHash = camHash;\n    }\n\n    const su = SplattingArgsUniform.fromArgsAndPc(renderSettings, pc);\n    const settingsBytes = this.serializeSettingsUniform(su);\n    const setHash = hashBytesU64(settingsBytes);\n    logi(\n      '[preprocess]',\n      `SplattingArgsUniform.size=${settingsBytes.byteLength} hash=${setHash}`\n    );\n    if (this._lastSetHash !== setHash) {\n      dumpU32('[preprocess] SplattingArgsUniform.bytes(u32le)=', settingsBytes);\n      this._lastSetHash = setHash;\n    }\n\n    // Upload to GPU\n    this.cameraUB.setData(new Uint8Array(cameraBytes));\n    this.cameraUB.sync(queue);\n    this.settingsUB.setData(new Uint8Array(settingsBytes));\n    this.settingsUB.sync(queue);\n\n    // init indirect\n    this.writeInitialDrawIndirect(queue);\n\n    // **One-shot gate flip after first successful frame prep**\n    (globalThis as any).__LOGGING_ENABLED__ = false;\n\n    return [this.cameraUB.bind_group(), this.settingsUB.bind_group()];\n  }\n\n  prepare(\n    encoder: GPUCommandEncoder,\n    device: GPUDevice,\n    queue: GPUQueue,\n    pc: PointCloud,\n    renderSettings: SplattingArgs,\n    stopwatch?: GPUStopwatch\n  ): void {\n    // (re)create sort buffers on size change\n    if (!this.sorterStuff || this.sorterStuff.numPoints !== pc.numPoints()) {\n      this.sorterStuff = this.sorter.createSortStuff(device, pc.numPoints());\n      const ss = this.sorterStuff;\n      logi(\n        '[prepare]',\n        `sorter buffers (num_points=${ss.numPoints}): uni.size=${ss.sorterUni.size} dis.size=${ss.sorterDis.size}`\n      );\n    }\n\n    GPURSSorter.recordResetIndirectBuffer(\n      this.sorterStuff.sorterDis,\n      this.sorterStuff.sorterUni,\n      queue\n    );\n    logi('[prepare]', 'reset indirect & uniform sorter buffers');\n\n    if (stopwatch) stopwatch.start(encoder, 'preprocess');\n    const [cameraBG, settingsBG] = this.preprocessStep(queue, pc, renderSettings);\n    this.preprocess.run(\n      encoder,\n      pc,\n      cameraBG,\n      this.sorterStuff.sorterBgPre,\n      settingsBG\n    );\n    if (stopwatch) stopwatch.stop(encoder, 'preprocess');\n\n    if (stopwatch) stopwatch.start(encoder, 'sorting');\n    this.sorter.recordSortIndirect(\n      this.sorterStuff.sorterBg,\n      this.sorterStuff.sorterDis,\n      encoder\n    );\n    if (stopwatch) stopwatch.stop(encoder, 'sorting');\n\n    // write instance_count into drawIndirect[+4]\n    encoder.copyBufferToBuffer(this.sorterStuff.sorterUni, 0, this.drawIndirectBuffer, 4, 4);\n    logi('[prepare]', 'copied visible instance_count into draw_indirect_buffer[+4]');\n\n    // Optional: read back indirect + visible for this frame\n    this._frameIndex++;\n    if (\n      DEBUG_READBACK_EVERY_N_FRAMES > 0 &&\n      (this._frameIndex % DEBUG_READBACK_EVERY_N_FRAMES === 0)\n    ) {\n      (async () => {\n        try {\n          const idab = await readbackBuffer(device, this.drawIndirectBuffer, 16);\n          const id = new Uint32Array(idab);\n          const visab = await readbackBuffer(device, this.sorterStuff!.sorterUni, 4);\n          const vis = new Uint32Array(visab)[0] >>> 0;\n\n          if (loggingEnabled()) {\n            console.log('[indirect]', {\n              vertexCount: id[0] >>> 0,\n              instanceCount: id[1] >>> 0,\n              firstVertex: id[2] >>> 0,\n              firstInstance: id[3] >>> 0\n            });\n            console.log('[visibleCount]', vis);\n          }\n        } catch (e) {\n          if (loggingEnabled()) console.warn('[debug-readback] failed:', e);\n        }\n      })();\n    }\n  }\n\n  render(renderPass: GPURenderPassEncoder, pc: PointCloud): void {\n    renderPass.setBindGroup(0, pc.getRenderBindGroup());\n    renderPass.setBindGroup(1, this.sorterStuff!.sorterRenderBg);\n    renderPass.setPipeline(this.pipeline);\n    renderPass.drawIndirect(this.drawIndirectBuffer, 0);\n  }\n}\n", "// controller.ts\nimport { vec2, vec3, mat3, quat } from 'gl-matrix';\nimport { PerspectiveCamera } from './camera.js';\n\n/** Toggle to log input + updates without changing behavior. */\nexport const DEBUG_INPUT = false;\nconst dlog = (...args: any[]) => { if (DEBUG_INPUT) console.debug('[controller]', ...args); };\n\n/** Minimal KeyCode union to mirror the Rust winit::keyboard::KeyCode variants used */\nexport type KeyCode =\n  | 'KeyW' | 'KeyS' | 'KeyA' | 'KeyD'\n  | 'ArrowUp' | 'ArrowDown' | 'ArrowLeft' | 'ArrowRight'\n  | 'KeyQ' | 'KeyE' | 'Space' | 'ShiftLeft';\n\nexport class CameraController {\n  public center: vec3;\n  public up: vec3 | null;\n\n  private amount: vec3;\n  private shift: vec2;\n  private rotation: vec3;\n  private scroll: number;\n\n  public speed: number;\n  public sensitivity: number;\n\n  public left_mouse_pressed: boolean;\n  public right_mouse_pressed: boolean;\n  public alt_pressed: boolean;\n  public user_inptut: boolean; // keep original typo for 1:1 API\n\n  constructor(speed: number, sensitivity: number) {\n    this.center = vec3.fromValues(0, 0, 0);\n    this.up = null;\n\n    this.amount = vec3.fromValues(0, 0, 0);\n    this.shift = vec2.fromValues(0, 0);\n    this.rotation = vec3.fromValues(0, 0, 0);\n    this.scroll = 0.0;\n\n    this.speed = speed;\n    this.sensitivity = sensitivity;\n\n    this.left_mouse_pressed = false;\n    this.right_mouse_pressed = false;\n    this.alt_pressed = false;\n    this.user_inptut = false;\n  }\n\n  /** Returns true if the key was handled (matches Rust\u2019s bool). */\n  process_keyboard(key: KeyCode, pressed: boolean): boolean {\n    const amount = pressed ? 1.0 : 0.0;\n    let processed = false;\n\n    switch (key) {\n      case 'KeyW':\n      case 'ArrowUp':\n        this.amount[2] += amount;\n        processed = true;\n        break;\n      case 'KeyS':\n      case 'ArrowDown':\n        this.amount[2] += -amount;\n        processed = true;\n        break;\n      case 'KeyA':\n      case 'ArrowLeft':\n        this.amount[0] += -amount;\n        processed = true;\n        break;\n      case 'KeyD':\n      case 'ArrowRight':\n        this.amount[0] += amount;\n        processed = true;\n        break;\n      case 'KeyQ':\n        this.rotation[2] += amount / this.sensitivity;\n        processed = true;\n        break;\n      case 'KeyE':\n        this.rotation[2] += -amount / this.sensitivity;\n        processed = true;\n        break;\n      case 'Space':\n        this.amount[1] += amount;\n        processed = true;\n        break;\n      case 'ShiftLeft':\n        this.amount[1] += -amount;\n        processed = true;\n        break;\n      default:\n        processed = false;\n    }\n\n    this.user_inptut = processed;\n    if (processed) dlog('process_keyboard', key, { pressed, amount: this.amount, rotation: this.rotation });\n    return processed;\n  }\n\n  /** mouse_dx/mouse_dy in pixels (same semantics as Rust). */\n  process_mouse(mouse_dx: number, mouse_dy: number): void {\n    if (this.left_mouse_pressed) {\n      this.rotation[0] += mouse_dx;\n      this.rotation[1] += mouse_dy;\n      this.user_inptut = true;\n      dlog('process_mouse rotate', { dx: mouse_dx, dy: mouse_dy, rotation: this.rotation });\n    }\n    if (this.right_mouse_pressed) {\n      this.shift[1] += -mouse_dx;\n      this.shift[0] += mouse_dy;\n      this.user_inptut = true;\n      dlog('process_mouse pan', { dx: mouse_dx, dy: mouse_dy, shift: this.shift });\n    }\n  }\n\n  process_scroll(dy: number): void {\n    this.scroll += -dy;\n    this.user_inptut = true;\n    dlog('process_scroll', { dy, scroll: this.scroll });\n  }\n\n  /** Align controller to the camera\u2019s current line of sight and adjust up. */\n  reset_to_camera(camera: PerspectiveCamera): void {\n    const invView = quat.invert(quat.create(), camera.rotation);\n    const forward = vec3.transformQuat(vec3.create(), vec3.fromValues(0, 0, 1), invView);\n    const right = vec3.transformQuat(vec3.create(), vec3.fromValues(1, 0, 0), invView);\n\n    // Move center to closest point on the camera ray\n    this.center = closest_point(camera.position, forward, this.center);\n\n    // Adjust up vector by projecting it onto plane orthogonal to right\n    if (this.up) {\n      const projLen = vec3.dot(this.up, right) / vec3.dot(right, right);\n      const proj = vec3.scale(vec3.create(), right, projLen);\n      const newUp = vec3.normalize(vec3.create(), vec3.subtract(vec3.create(), this.up, proj));\n      this.up = newUp;\n    }\n    dlog('reset_to_camera', { center: this.center, up: this.up });\n  }\n\n  /**\n   * Update camera given dt in seconds (1:1 with Duration semantics).\n   * Mutates camera position/rotation.\n   */\n  update_camera(camera: PerspectiveCamera, dt_seconds: number): void {\n    const dt = dt_seconds;\n\n    // Vector from center to camera\n    const dir = vec3.subtract(vec3.create(), camera.position, this.center);\n    const distance = Math.max(1e-12, vec3.length(dir));\n\n    // Dolly via scroll\n    const newDist = Math.exp(Math.log(distance) + this.scroll * dt * 10.0 * this.speed);\n    const dirNorm = vec3.scale(vec3.create(), vec3.normalize(vec3.create(), dir), newDist);\n\n    // Fixed up (no roll): use custom up if present, else world up\n    const worldUp = this.up ? normalizeSafe(this.up) : vec3.fromValues(0, 1, 0);\n\n    // ---------- PAN AXES (match Rust; invert left/right) ----------\n    // x_axis = right = normalize(up \u00D7 dir)\n    let x_axis = vec3.cross(vec3.create(), worldUp, dirNorm);\n    x_axis = normalizeSafe(x_axis);\n    if (vec3.length(x_axis) < 1e-6) {\n      x_axis = vec3.fromValues(1, 0, 0); // rare pole fallback\n    }\n    const y_axis = worldUp;\n\n    // Invert left/right by flipping sign on x_axis contribution\n    const panScale = dt * this.speed * 0.1 * distance;\n    const pan = vec3.create();\n    vec3.scaleAndAdd(pan, pan, x_axis, -this.shift[1] * panScale);\n    vec3.scaleAndAdd(pan, pan, y_axis, -this.shift[0] * panScale);\n    vec3.add(this.center, this.center, pan);\n    vec3.add(camera.position, camera.position, pan);\n\n    // ---------- ORBIT (yaw/pitch only, no roll) ----------\n    const yaw   = (this.rotation[0]) * dt * this.sensitivity; // mouse X\n    const pitch = (this.rotation[1]) * dt * this.sensitivity; // mouse Y\n\n    // right axis for pitch: up \u00D7 viewDir (same as x_axis above)\n    let right = vec3.clone(x_axis);\n    if (vec3.length(right) < 1e-6) right = vec3.fromValues(1, 0, 0);\n\n    const qYaw   = quat.setAxisAngle(quat.create(), worldUp, yaw);\n    const qPitch = quat.setAxisAngle(quat.create(), right,  pitch);\n    const rot = quat.multiply(quat.create(), qYaw, qPitch);\n\n    const new_dir = vec3.transformQuat(vec3.create(), dirNorm, rot);\n\n    // Prevent pole flip (~0.1 rad)\n    if (angle_short(worldUp, new_dir) < 0.1) {\n      vec3.copy(new_dir, dirNorm);\n    }\n\n    // Position and orientation (look along -new_dir with fixed up = worldUp)\n    vec3.add(camera.position, this.center, new_dir);\n    camera.rotation = lookRotation(vec3.scale(vec3.create(), new_dir, -1), worldUp);\n\n    // ---------- damping ----------\n    let decay = Math.pow(0.8, dt * 60.0);\n    if (decay < 1e-4) decay = 0.0;\n\n    vec3.scale(this.rotation, this.rotation, decay);\n    if (vec3.length(this.rotation) < 1e-4) vec3.set(this.rotation, 0, 0, 0);\n\n    vec2.scale(this.shift, this.shift, decay);\n    if (vec2.length(this.shift) < 1e-4) vec2.set(this.shift, 0, 0);\n\n    this.scroll *= decay;\n    if (Math.abs(this.scroll) < 1e-4) this.scroll = 0.0;\n\n    this.user_inptut = false;\n    dlog('update_camera (orbit, no-roll)', { dt, yaw, pitch, center: this.center, camPos: camera.position });\n  }\n}\n\n/* ----------------------------- helpers (1:1) ----------------------------- */\n\nfunction closest_point(orig: vec3, dir: vec3, point: vec3): vec3 {\n  const d = normalizeSafe(dir);\n  const lhs = vec3.subtract(vec3.create(), point, orig);\n  const dot_p = vec3.dot(lhs, d);\n  const out = vec3.scaleAndAdd(vec3.create(), orig, d, dot_p);\n  return out;\n}\n\nfunction angle_short(a: vec3, b: vec3): number {\n  const na = normalizeSafe(a);\n  const nb = normalizeSafe(b);\n  const dot = Math.min(1, Math.max(-1, vec3.dot(na, nb)));\n  const angle = Math.acos(dot);\n  return angle > Math.PI / 2 ? Math.PI - angle : angle;\n}\n\nfunction normalizeSafe(v: vec3): vec3 {\n  const len = vec3.length(v);\n  return len > 0 ? vec3.scale(vec3.create(), v, 1 / len) : vec3.fromValues(0, 0, 0);\n}\n\n/** Quaternion that makes -Z look along `forward` with the given `up`. */\nfunction lookRotation(forward: vec3, up: vec3): quat {\n  const f = normalizeSafe(forward);\n  const r = normalizeSafe(vec3.cross(vec3.create(), up, f));\n  const u = vec3.cross(vec3.create(), f, r);\n\n  // Column-major mat3 (gl-matrix): columns are r, u, f\n  const m = mat3.fromValues(\n    r[0], r[1], r[2],\n    u[0], u[1], u[2],\n    f[0], f[1], f[2]\n  );\n  const q = quat.fromMat3(quat.create(), m);\n  return quat.normalize(q, q);\n}\n", "// utils.ts\n// 1-for-1 port of utils.rs utilities used by the renderer.\n\nimport { quat, vec3 } from 'gl-matrix';\n\n/** Map KeyboardEvent.code like \"Digit3\" -> 3, otherwise null */\nexport function key_to_num(code: string): number | null {\n  switch (code) {\n    case 'Digit0': return 0;\n    case 'Digit1': return 1;\n    case 'Digit2': return 2;\n    case 'Digit3': return 3;\n    case 'Digit4': return 4;\n    case 'Digit5': return 5;\n    case 'Digit6': return 6;\n    case 'Digit7': return 7;\n    case 'Digit8': return 8;\n    case 'Digit9': return 9;\n    default: return null;\n  }\n}\n\n/**\n * GPUStopwatch \u2014 mirrors the Rust struct/methods:\n * fields: query_set, query_buffer, query_set_capacity, index, labels\n * methods: new(..), start(..), stop(..), end(..), reset(), take_measurements(..)\n *\n * NOTE: WebGPU timestamp queries may be unavailable; in that case this class\n * degrades to no-ops and returns empty results.\n */\nexport class GPUStopwatch {\n  // --- fields (same names as Rust) ---\n  private query_set: GPUQuerySet | null;\n  private query_buffer: GPUBuffer | null;\n  private query_set_capacity: number; // total query slots (pairs * 2)\n  private index: number;              // pair index (start/stop)\n  private labels: Map<string, number>;\n\n  // Web: browsers don\u2019t expose a timestamp period like wgpu; assume ns ticks.\n  private timestamp_period_ns = 1;\n\n  // Rust: GPUStopwatch::new(device, capacity)\n  static new(device: GPUDevice, capacity?: number): GPUStopwatch {\n    return new GPUStopwatch(device, capacity);\n  }\n\n  constructor(device: GPUDevice, capacity?: number) {\n    const pairs = Math.max(1, capacity ?? (8192 >> 1)); // default like Rust comment\n    this.query_set_capacity = pairs * 2;\n    this.index = 0;\n    this.labels = new Map();\n\n    let qs: GPUQuerySet | null = null;\n    let qb: GPUBuffer | null = null;\n    try {\n      qs = device.createQuerySet({\n        label: 'time stamp query set',\n        type: 'timestamp',\n        count: this.query_set_capacity,\n      });\n      qb = device.createBuffer({\n        label: 'query set buffer',\n        size: this.query_set_capacity * 8, // u64 per timestamp\n        usage: GPUBufferUsage.QUERY_RESOLVE | GPUBufferUsage.COPY_SRC,\n      });\n    } catch {\n      // Feature not supported in current environment.\n      qs = null;\n      qb = null;\n    }\n    this.query_set = qs;\n    this.query_buffer = qb;\n  }\n\n  // Rust: start(&mut self, encoder, label) -> Result<(), String>\n  start(encoder: GPUCommandEncoder, label: string): void {\n    if (!this.query_set) return;\n    if (this.labels.has(label)) {\n      throw new Error('cannot start measurement for same label twice');\n    }\n    if (this.labels.size * 2 >= this.query_set_capacity) {\n      throw new Error(`query set capacity (${this.query_set_capacity})reached`);\n    }\n    this.labels.set(label, this.index);\n    // write start timestamp at slot (index*2)\n    (encoder as any).writeTimestamp?.(this.query_set, this.index * 2);\n    this.index += 1;\n  }\n\n  // Rust: stop(&mut self, encoder, label) -> Result<(), String>\n  stop(encoder: GPUCommandEncoder, label: string): void {\n    if (!this.query_set) return;\n    const idx = this.labels.get(label);\n    if (idx === undefined) {\n      throw new Error(`start was not yet called for label ${label}`);\n    }\n    // write stop timestamp at slot (idx*2+1)\n    (encoder as any).writeTimestamp?.(this.query_set, idx * 2 + 1);\n  }\n\n  // Rust: end(&mut self, encoder)\n  end(encoder: GPUCommandEncoder): void {\n    if (!this.query_set || !this.query_buffer) return;\n    encoder.resolveQuerySet(this.query_set, 0, this.query_set_capacity, this.query_buffer, 0);\n    this.index = 0;\n  }\n\n  // Rust: reset(&mut self)\n  reset(): void {\n    this.labels.clear();\n  }\n\n  // Rust: take_measurements(&mut self, device, queue) -> HashMap<String, Duration>\n  // TS: returns Map<label, duration_ms>\n  async take_measurements(\n    device: GPUDevice,\n    queue: GPUQueue,\n  ): Promise<Map<string, number>> {\n    const out = new Map<string, number>();\n    if (!this.query_buffer) return out;\n\n    // Drain labels like Rust (labels.drain()).\n    const labels = Array.from(this.labels.entries());\n    this.labels.clear();\n\n    // Read back the whole buffer (like Rust resolves the whole capacity).\n    const byteSize = this.query_set_capacity * 8;\n    const staging = device.createBuffer({\n      size: byteSize,\n      usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\n    });\n\n    const enc = device.createCommandEncoder({ label: 'GPUStopwatch readback' });\n    enc.copyBufferToBuffer(this.query_buffer, 0, staging, 0, byteSize);\n    queue.submit([enc.finish()]);\n\n    await staging.mapAsync(GPUMapMode.READ);\n    const data = staging.getMappedRange();\n    const timestamps = new BigUint64Array(data);\n\n    for (const [label, index] of labels) {\n      const start = timestamps[index * 2];\n      const stop  = timestamps[index * 2 + 1];\n      if (stop > start) {\n        // Treat ticks as ns; convert to ms to align with Duration-ish readouts\n        const diff_ns = stop - start;\n        const ms = Number(diff_ns) / 1_000_000 / this.timestamp_period_ns;\n        out.set(label, ms);\n      }\n    }\n\n    staging.unmap();\n    staging.destroy();\n    return out;\n  }\n}\n\n/** Simple ring buffer used for fixed-size rolling statistics, etc. */\nexport class RingBuffer<T> {\n  private index = 0;\n  private size = 0;\n  private store: (T | undefined)[];\n\n  constructor(capacity: number) {\n    this.store = new Array(Math.max(1, capacity));\n  }\n\n  push(item: T): void {\n    this.store[this.index] = item;\n    this.index = (this.index + 1) % this.store.length;\n    this.size = Math.min(this.size + 1, this.store.length);\n  }\n\n  to_array(): T[] {\n    const out: T[] = [];\n    if (this.size === 0) return out;\n    const start = (this.index - this.size + this.store.length) % this.store.length;\n    for (let i = 0; i < this.size; i++) {\n      const v = this.store[(start + i) % this.store.length];\n      if (v !== undefined) out.push(v);\n    }\n    return out;\n  }\n}\n\n/** Number of SH coefficients for degree `sh_deg` ( (n+1)^2 ). */\nexport function sh_num_coefficients(sh_deg: number): number {\n  return (sh_deg + 1) * (sh_deg + 1);\n}\n\n/** Inverse of sh_num_coefficients: returns degree if n is a perfect square; else null. */\nexport function sh_deg_from_num_coefs(n: number): number | null {\n  const sqrt = Math.sqrt(n);\n  return Number.isInteger(sqrt) ? (sqrt | 0) - 1 : null;\n}\n\n/**\n * Build the symmetric covariance (upper-triangular packed: m00,m01,m02,m11,m12,m22)\n * from rotation (unit quaternion) and axis scales.\n * Matches Kerbl et al. \u201C3D Gaussian Splatting \u2026\u201D\n *\n * rotation is [x,y,z,w] (unit), scale is [sx,sy,sz] after exp().\n */\nexport function build_cov(\n  rotation: quat,   // [x,y,z,w], already normalized\n  scale: vec3       // [sx,sy,sz], already exp()'d\n): [number, number, number, number, number, number] {\n  const x = rotation[0], y = rotation[1], z = rotation[2], w = rotation[3];\n  const sx = scale[0],   sy = scale[1],   sz = scale[2];\n\n  // D = diag(s^2)\n  const d0 = sx * sx, d1 = sy * sy, d2 = sz * sz;\n\n  // Quaternion -> rotation matrix (same convention as cgmath::Matrix3::from(quat))\n  const xx = x * x, yy = y * y, zz = z * z;\n  const xy = x * y, xz = x * z, yz = y * z;\n  const wx = w * x, wy = w * y, wz = w * z;\n\n  const r00 = 1 - 2 * (yy + zz);\n  const r01 = 2 * (xy - wz);\n  const r02 = 2 * (xz + wy);\n\n  const r10 = 2 * (xy + wz);\n  const r11 = 1 - 2 * (xx + zz);\n  const r12 = 2 * (yz - wx);\n\n  const r20 = 2 * (xz - wy);\n  const r21 = 2 * (yz + wx);\n  const r22 = 1 - 2 * (xx + yy);\n\n  // RD = R * D  (scales R's columns by d0,d1,d2)\n  const rd00 = r00 * d0, rd01 = r01 * d1, rd02 = r02 * d2;\n  const rd10 = r10 * d0, rd11 = r11 * d1, rd12 = r12 * d2;\n  const rd20 = r20 * d0, rd21 = r21 * d1, rd22 = r22 * d2;\n\n  // M = RD * R^T\n  const m00 = rd00 * r00 + rd01 * r01 + rd02 * r02;\n  const m01 = rd00 * r10 + rd01 * r11 + rd02 * r12;\n  const m02 = rd00 * r20 + rd01 * r21 + rd02 * r22;\n\n  const m11 = rd10 * r10 + rd11 * r11 + rd12 * r12;\n  const m12 = rd10 * r20 + rd11 * r21 + rd12 * r22;\n\n  const m22 = rd20 * r20 + rd21 * r21 + rd22 * r22;\n\n  // Pack exactly like Rust: [m00, m01, m02, m11, m12, m22]\n  return [m00, m01, m02, m11, m12, m22];\n}\n\n/** Numerically stable sigmoid */\nexport function sigmoid(x: number): number {\n  return x >= 0 ? 1 / (1 + Math.exp(-x)) : Math.exp(x) / (1 + Math.exp(x));\n}\n\n/* -------------------------------------------------------------------------- */\n/*                    camelCase aliases (for mixed imports)                    */\n/* -------------------------------------------------------------------------- */\nexport const buildCov = build_cov;\nexport const shDegFromNumCoefs = sh_deg_from_num_coefs;\nexport const shNumCoefficients = sh_num_coefficients;\n", "// io/ply.ts\n// 1:1 port of src/io/ply.rs (binary big/little endian; ASCII path left as TODO to match Rust)\n\nimport { quat, vec3 } from 'gl-matrix';\nimport { Gaussian } from '../pointcloud';\nimport { buildCov, shDegFromNumCoefs, sigmoid } from '../utils';\nimport { GenericGaussianPointCloud, PointCloudReader } from './mod';\n\n/* -------------------------------------------------------------------------- */\n/*                           DEBUG: limit loaded splats                        */\n/* -------------------------------------------------------------------------- */\nconst DEBUG_MAX_SPLATS: number | null = null;\n\n/* -------------------------------------------------------------------------- */\n/*                      DEBUG: one-shot data dump for splat 0                 */\n/* -------------------------------------------------------------------------- */\nconst DEBUG_LOG_PLY_SAMPLE0: boolean = true;\nlet __PLY_SAMPLE_LOGGED__ = false;\n\n/* ------------------------- helpers for fixed-length SH ------------------------- */\ntype SHTriplet = [number, number, number];\ntype SHBlock16 = [\n  SHTriplet, SHTriplet, SHTriplet, SHTriplet,\n  SHTriplet, SHTriplet, SHTriplet, SHTriplet,\n  SHTriplet, SHTriplet, SHTriplet, SHTriplet,\n  SHTriplet, SHTriplet, SHTriplet, SHTriplet\n];\n\n/* --------------------------- module-scope scratch --------------------------- */\nconst qScratch = quat.create();\nconst scaleScratch = vec3.create();\n\n/* -------------------------------------------------------------------------- */\n/*                               Header parsing                                */\n/* -------------------------------------------------------------------------- */\n\ntype PlyEncoding = 'ascii' | 'binary_little_endian' | 'binary_big_endian';\n\ninterface ParsedHeader {\n  encoding: PlyEncoding;\n  vertexCount: number;\n  comments: string[];\n  vertexPropNames: string[];\n  headerByteLength: number;\n}\n\nfunction parsePlyHeader(data: ArrayBuffer): ParsedHeader {\n  const u8 = new Uint8Array(data);\n\n  // find \"end_header\"\n  const needle = utf8Bytes('end_header');\n  let endIdx = -1;\n  search: for (let i = 0; i <= u8.length - needle.length; i++) {\n    for (let j = 0; j < needle.length; j++) {\n      if (u8[i + j] !== needle[j]) continue search;\n    }\n    endIdx = i + needle.length;\n    break;\n  }\n  if (endIdx < 0) throw new Error('PLY: end_header not found');\n\n  // include the newline after \"end_header\"\n  let headerEnd = endIdx;\n  while (headerEnd < u8.length && u8[headerEnd] !== 0x0a /* \\n */) headerEnd++;\n  headerEnd++;\n\n  const headerText = asciiDecode(u8.subarray(0, headerEnd));\n  const lines = headerText.split(/\\r?\\n/).map((s) => s.trim()).filter(Boolean);\n\n  let encoding: PlyEncoding | null = null;\n  let vertexCount = 0;\n  const comments: string[] = [];\n  const vertexPropNames: string[] = [];\n  let inVertexElement = false;\n\n  for (const line of lines) {\n    if (line.startsWith('comment ')) {\n      comments.push(line.substring('comment '.length));\n      continue;\n    }\n    if (line.startsWith('format ')) {\n      if (line.includes('binary_little_endian')) encoding = 'binary_little_endian';\n      else if (line.includes('binary_big_endian')) encoding = 'binary_big_endian';\n      else if (line.includes('ascii')) encoding = 'ascii';\n      else throw new Error(`PLY: unknown format in line \"${line}\"`);\n      continue;\n    }\n    if (line.startsWith('element ')) {\n      const parts = line.split(/\\s+/);\n      const elemName = parts[1];\n      inVertexElement = (elemName === 'vertex');\n      if (inVertexElement) {\n        vertexCount = parseInt(parts[2], 10);\n      }\n      continue;\n    }\n    if (line.startsWith('property ') && inVertexElement) {\n      const parts = line.split(/\\s+/);\n      const name = parts[parts.length - 1];\n      vertexPropNames.push(name);\n      continue;\n    }\n  }\n\n  if (!encoding) throw new Error('PLY: format line not found');\n\n  return {\n    encoding,\n    vertexCount,\n    comments,\n    vertexPropNames,\n    headerByteLength: headerEnd,\n  };\n}\n\nfunction utf8Bytes(s: string): Uint8Array {\n  return new TextEncoder().encode(s);\n}\n\nfunction asciiDecode(bytes: Uint8Array): string {\n  return new TextDecoder('utf-8').decode(bytes);\n}\n\n/* -------------------------------------------------------------------------- */\n/*                                  Reader                                     */\n/* -------------------------------------------------------------------------- */\n\nexport class PlyReader implements PointCloudReader {\n  private header: ParsedHeader;\n  private dv: DataView;\n  private offset: number;\n\n  private sh_deg: number;\n  private num_points: number;\n  private mip_splatting: boolean | null;\n  private kernel_size: number | null;\n  private background_color: [number, number, number] | null;\n\n  // precomputed once (avoids per-splat allocation)\n  private numCoefs: number;\n  private restScratch: Float32Array;\n\n  constructor(reader: ArrayBuffer) {\n    this.header = parsePlyHeader(reader);\n    this.dv = new DataView(reader);\n    this.offset = this.header.headerByteLength;\n\n    const numShCoefs = this.header.vertexPropNames.filter((n) => n.startsWith('f_')).length;\n    const deg = shDegFromNumCoefs(numShCoefs / 3);\n    if (deg == null) {\n      throw new Error(`number of sh coefficients ${numShCoefs} cannot be mapped to sh degree`);\n    }\n    this.sh_deg = deg;\n\n    // Precompute counts + scratch for SH rest\n    this.numCoefs = (this.sh_deg + 1) * (this.sh_deg + 1);\n    this.restScratch = new Float32Array(Math.max(0, (this.numCoefs - 1) * 3));\n\n    // Apply debug clamp to number of points\n    const fileCount = this.header.vertexCount;\n    const clamped =\n      DEBUG_MAX_SPLATS != null && DEBUG_MAX_SPLATS > 0\n        ? Math.min(fileCount, DEBUG_MAX_SPLATS)\n        : fileCount;\n    if (clamped !== fileCount) {\n      console.log(`[ply] DEBUG: clamping splats ${fileCount} -> ${clamped}`);\n    }\n    this.num_points = clamped;\n\n    // comments\n    this.mip_splatting = parseBoolFromComments(this.header.comments, 'mip');\n    this.kernel_size = parseNumberFromComments(this.header.comments, 'kernel_size');\n    this.background_color = parseRGBFromComments(this.header.comments, 'background_color');\n  }\n\n  static new(reader: ArrayBuffer): PlyReader {\n    return new PlyReader(reader);\n  }\n\n  static magic_bytes(): Uint8Array {\n    return new Uint8Array([0x70, 0x6c, 0x79]); // \"ply\"\n  }\n\n  static file_ending(): string {\n    return 'ply';\n  }\n\n  read(): GenericGaussianPointCloud {\n    const gaussians: Gaussian[] = [];\n    const sh_coefs: SHBlock16[] = [];\n\n    switch (this.header.encoding) {\n      case 'ascii':\n        throw new Error('ascii ply format not supported'); // matches Rust todo!()\n      case 'binary_big_endian':\n        for (let i = 0; i < this.num_points; i++) {\n          const { g, s } = this.read_line(false);\n          gaussians.push(g);\n          sh_coefs.push(s);\n        }\n        break;\n      case 'binary_little_endian':\n        for (let i = 0; i < this.num_points; i++) {\n          const { g, s } = this.read_line(true);\n          gaussians.push(g);\n          sh_coefs.push(s);\n        }\n        break;\n    }\n\n    return GenericGaussianPointCloud.new(\n      gaussians,\n      sh_coefs,\n      this.sh_deg,\n      this.num_points,\n      this.kernel_size,\n      this.mip_splatting,\n      this.background_color,\n      null,\n      null,\n    );\n  }\n\n  private read_line(littleEndian: boolean): { g: Gaussian; s: SHBlock16 } {\n    // pos: 3*f32\n    const px = this.readF32(littleEndian);\n    const py = this.readF32(littleEndian);\n    const pz = this.readF32(littleEndian);\n\n    // skip normals: 3*f32\n    this.readF32(littleEndian);\n    this.readF32(littleEndian);\n    this.readF32(littleEndian);\n\n    // SH coefficients (init 16 triplets)\n    const sh = Array.from({ length: 16 }, () => [0, 0, 0] as SHTriplet) as SHBlock16;\n\n    // read DC term\n    sh[0][0] = this.readF32(littleEndian);\n    sh[0][1] = this.readF32(littleEndian);\n    sh[0][2] = this.readF32(littleEndian);\n\n    // read remaining channel-first SH into reusable scratch\n    const restCount = (this.numCoefs - 1) * 3;\n    const rest = this.restScratch;\n    for (let i = 0; i < restCount; i++) rest[i] = this.readF32(littleEndian);\n\n    // channel-first -> per-coef triplets\n    const stride = (this.numCoefs - 1);\n    for (let i = 0; i < this.numCoefs - 1; i++) {\n      // r,g,b\n      sh[i + 1][0] = rest[0 * stride + i];\n      sh[i + 1][1] = rest[1 * stride + i];\n      sh[i + 1][2] = rest[2 * stride + i];\n    }\n\n    // opacity: sigmoid(f32)\n    const opacity = sigmoid(this.readF32(littleEndian));\n\n    // scale: exp(f32) -> write into scratch vec\n    const s1 = Math.exp(this.readF32(littleEndian));\n    const s2 = Math.exp(this.readF32(littleEndian));\n    const s3 = Math.exp(this.readF32(littleEndian));\n    scaleScratch[0] = s1; scaleScratch[1] = s2; scaleScratch[2] = s3;\n\n    // rotation quaternion: (w,x,y,z) -> gl-matrix order [x,y,z,w] in scratch\n    const r0 = this.readF32(littleEndian);\n    const r1 = this.readF32(littleEndian);\n    const r2 = this.readF32(littleEndian);\n    const r3 = this.readF32(littleEndian);\n    // q = [x,y,z,w]\n    qScratch[0] = r1; qScratch[1] = r2; qScratch[2] = r3; qScratch[3] = r0;\n    quat.normalize(qScratch, qScratch);\n\n    // covariance upper-triangular (allocation-free buildCov)\n    const cov = buildCov(qScratch, scaleScratch);\n\n    const g: Gaussian = {\n      xyz: { x: px, y: py, z: pz },\n      opacity,\n      cov: [cov[0], cov[1], cov[2], cov[3], cov[4], cov[5]],\n    };\n\n    // one-shot sample logging\n    if (DEBUG_LOG_PLY_SAMPLE0 && !__PLY_SAMPLE_LOGGED__) {\n      __PLY_SAMPLE_LOGGED__ = true;\n      console.log('[ply::sample0] pos', [px, py, pz]);\n      console.log('[ply::sample0] opacity', opacity);\n      console.log('[ply::sample0] scale(exp)', [s1, s2, s3]);\n      console.log('[ply::sample0] quat(x,y,z,w) normalized', [qScratch[0], qScratch[1], qScratch[2], qScratch[3]]);\n      console.log('[ply::sample0] cov[0..5]', [cov[0], cov[1], cov[2], cov[3], cov[4], cov[5]]);\n      console.log('[ply::sample0] SH[0]', [sh[0][0], sh[0][1], sh[0][2]]);\n      if (this.numCoefs > 1) console.log('[ply::sample0] SH[1]', [sh[1][0], sh[1][1], sh[1][2]]);\n      if (this.numCoefs > 2) console.log('[ply::sample0] SH[2]', [sh[2][0], sh[2][1], sh[2][2]]);\n    }\n\n    return { g, s: sh };\n  }\n\n  private readF32(littleEndian: boolean): number {\n    const v = this.dv.getFloat32(this.offset, littleEndian);\n    this.offset += 4;\n    return v;\n  }\n\n  static magic_bytes_ts(): Uint8Array {\n    return PlyReader.magic_bytes();\n  }\n}\n\n/* -------------------------------------------------------------------------- */\n/*                              Comment parsers                                */\n/* -------------------------------------------------------------------------- */\n\nfunction parseBoolFromComments(comments: string[], key: string): boolean | null {\n  for (const c of comments) {\n    if (c.includes(key)) {\n      const idx = c.indexOf('=');\n      if (idx >= 0) {\n        const raw = c.substring(idx + 1).trim();\n        if (raw === 'true') return true;\n        if (raw === 'false') return false;\n      }\n    }\n  }\n  return null;\n}\n\nfunction parseNumberFromComments(comments: string[], key: string): number | null {\n  for (const c of comments) {\n    if (c.includes(key)) {\n      const idx = c.indexOf('=');\n      if (idx >= 0) {\n        const raw = c.substring(idx + 1).trim();\n        const num = Number(raw);\n        if (!Number.isNaN(num)) return num;\n      }\n    }\n  }\n  return null;\n}\n\nfunction parseRGBFromComments(comments: string[], key: string): [number, number, number] | null {\n  for (const c of comments) {\n    if (c.includes(key)) {\n      const idx = c.indexOf('=');\n      if (idx >= 0) {\n        const raw = c.substring(idx + 1).trim();\n        const parts = raw.split(',').map((s) => Number(s.trim()));\n        if (parts.length === 3 && parts.every((v) => Number.isFinite(v))) {\n          return [parts[0], parts[1], parts[2]];\n        }\n      }\n    }\n  }\n  return null;\n}\n", "// io/mod.ts\n// 1:1 port of src/io/mod.rs (with TS-friendly types)\n\nimport {\n  Aabb,\n  Gaussian,\n  GaussianCompressed,\n  Covariance3D,\n  GaussianQuantization,\n  Point3f32,\n  Vector3f32,\n} from '../pointcloud';\n\nimport { PlyReader } from './ply';\n// import { NpzReader } from './npz';\n\n/* ------------------------- helpers for fixed-length SH ------------------------- */\n/** One SH coefficient triplet (r,g,b) */\ntype SHTriplet = [number, number, number];\n/** Exactly 16 SH triplets, fixed-length tuple */\ntype SHBlock16 = [\n  SHTriplet, SHTriplet, SHTriplet, SHTriplet,\n  SHTriplet, SHTriplet, SHTriplet, SHTriplet,\n  SHTriplet, SHTriplet, SHTriplet, SHTriplet,\n  SHTriplet, SHTriplet, SHTriplet, SHTriplet\n];\n\nexport interface PointCloudReader {\n  read(): GenericGaussianPointCloud;\n  // concrete readers expose static magic_bytes() and file_ending()\n}\n\nexport class GenericGaussianPointCloud {\n  private gaussiansBytes: Uint8Array;\n  private shCoefsBytes: Uint8Array;\n  private _compressed: boolean;\n\n  public covars: Covariance3D[] | null;\n  public quantization: GaussianQuantization | null;\n  public sh_deg: number;\n  public num_points: number;\n  public kernel_size: number | null;\n  public mip_splatting: boolean | null;\n  public background_color: [number, number, number] | null;\n\n  public up: Vector3f32 | null;\n  public center: Point3f32;\n  public aabb: Aabb;\n\n  private _gaussiansParsed: Gaussian[] | null = null;\n\n  static load(data: ArrayBuffer): GenericGaussianPointCloud {\n    const sig = new Uint8Array(data, 0, 4);\n\n    if (startsWith(sig, PlyReader.magic_bytes())) {\n      const ply = new PlyReader(data);\n      return ply.read();\n    }\n    // if (startsWith(sig, NpzReader.magic_bytes())) {\n    //   const npz = new NpzReader(data);\n    //   return npz.read();\n    // }\n\n    throw new Error('Unknown file format');\n  }\n\n  // Rust: fn new(gaussians: Vec<Gaussian>, sh_coefs: Vec<[[f16;3];16]>, ...)\n  static new(\n    gaussians: Gaussian[],\n    sh_coefs: SHBlock16[],\n    sh_deg: number,\n    num_points: number,\n    kernel_size: number | null,\n    mip_splatting: boolean | null,\n    background_color: [number, number, number] | null,\n    covars: Covariance3D[] | null,\n    quantization: GaussianQuantization | null,\n  ): GenericGaussianPointCloud {\n    let bbox = Aabb.zeroed();\n    for (const g of gaussians) {\n      bbox.grow({ x: g.xyz.x, y: g.xyz.y, z: g.xyz.z });\n    }\n\n    const points: Point3f32[] = gaussians.map((g) => ({\n      x: g.xyz.x, y: g.xyz.y, z: g.xyz.z,\n    }));\n    const [center, up0] = plane_from_points(points);\n\n    let up: Vector3f32 | null = up0;\n    if (bbox.radius() < 10.0) up = null;\n\n    const gaussiansBytes = packGaussiansF16(gaussians);\n    const shCoefsBytes = packShCoefsF16(sh_coefs);\n\n    return new GenericGaussianPointCloud(\n      gaussiansBytes,\n      shCoefsBytes,\n      sh_deg,\n      num_points,\n      kernel_size,\n      mip_splatting,\n      background_color,\n      covars,\n      quantization,\n      up,\n      center,\n      bbox,\n      /* compressed */ false,\n      /* parsed */ gaussians,\n    );\n  }\n\n  // Rust: fn new_compressed(...)\n  static new_compressed(\n    gaussians: GaussianCompressed[],\n    sh_coefs_packed: Uint8Array,\n    sh_deg: number,\n    num_points: number,\n    kernel_size: number | null,\n    mip_splatting: boolean | null,\n    background_color: [number, number, number] | null,\n    covars: Covariance3D[] | null,\n    quantization: GaussianQuantization | null,\n  ): GenericGaussianPointCloud {\n    let bbox = Aabb.unit();\n    for (const v of gaussians) {\n      bbox.grow({ x: v.xyz.x, y: v.xyz.y, z: v.xyz.z });\n    }\n\n    const points: Point3f32[] = gaussians.map((g) => ({\n      x: g.xyz.x, y: g.xyz.y, z: g.xyz.z,\n    }));\n    const [center, up0] = plane_from_points(points);\n    let up: Vector3f32 | null = up0;\n    if (bbox.radius() < 10.0) up = null;\n\n    const gaussiansBytes = packGaussiansCompressed(gaussians);\n\n    return new GenericGaussianPointCloud(\n      gaussiansBytes,\n      sh_coefs_packed,\n      sh_deg,\n      num_points,\n      kernel_size,\n      mip_splatting,\n      background_color,\n      covars,\n      quantization,\n      up,\n      center,\n      bbox,\n      /* compressed */ true,\n      /* parsed */ null,\n    );\n  }\n\n  private constructor(\n    gaussiansBytes: Uint8Array,\n    shCoefsBytes: Uint8Array,\n    sh_deg: number,\n    num_points: number,\n    kernel_size: number | null,\n    mip_splatting: boolean | null,\n    background_color: [number, number, number] | null,\n    covars: Covariance3D[] | null,\n    quantization: GaussianQuantization | null,\n    up: Vector3f32 | null,\n    center: Point3f32,\n    aabb: Aabb,\n    compressed: boolean,\n    parsed: Gaussian[] | null,\n  ) {\n    this.gaussiansBytes = gaussiansBytes;\n    this.shCoefsBytes = shCoefsBytes;\n    this._compressed = compressed;\n\n    this.covars = covars ?? null;\n    this.quantization = quantization ?? null;\n\n    this.sh_deg = sh_deg;\n    this.num_points = num_points;\n    this.kernel_size = kernel_size ?? null;\n    this.mip_splatting = mip_splatting ?? null;\n    this.background_color = background_color ?? null;\n\n    this.up = up;\n    this.center = center;\n    this.aabb = aabb;\n\n    this._gaussiansParsed = parsed;\n  }\n\n  gaussians(): Gaussian[] {\n    if (this._compressed) {\n      throw new Error('Gaussians are compressed');\n    }\n    if (this._gaussiansParsed) return this._gaussiansParsed;\n    throw new Error('Parsed gaussians not available');\n  }\n\n  // (kept aligned with the Rust provided logic signature-wise;\n  // the Rust version appears inconsistent; we mirror the surface API)\n  gaussians_compressed(): GaussianCompressed[] {\n    if (this._compressed) {\n      throw new Error('Gaussians are compressed');\n    } else {\n      // The Rust snippet returns a cast here; we surface an error like it would at runtime.\n      throw new Error('Not compressed');\n    }\n  }\n\n  sh_coefs_buffer(): Uint8Array {\n    return this.shCoefsBytes;\n  }\n\n  gaussian_buffer(): Uint8Array {\n    return this.gaussiansBytes;\n  }\n\n  compressed(): boolean {\n    return this._compressed;\n  }\n}\n\n/* ------------------------------- small helpers ------------------------------ */\n\nfunction startsWith(buf: Uint8Array, sig: Uint8Array): boolean {\n  if (sig.length > buf.length) return false;\n  for (let i = 0; i < sig.length; i++) if (buf[i] !== sig[i]) return false;\n  return true;\n}\n\n/* ---------- fast float32 -> float16 (no per-call allocations) ---------- */\n// Reuse a single scratch buffer to avoid millions of tiny allocations.\nconst __f16_scratch_f32 = new Float32Array(1);\nconst __f16_scratch_u32 = new Uint32Array(__f16_scratch_f32.buffer);\n\nfunction f32_to_f16(val: number): number {\n  __f16_scratch_f32[0] = val;\n  const x = __f16_scratch_u32[0];\n\n  const sign = (x >>> 16) & 0x8000; // bit 15\n  let exp  = (x >>> 23) & 0xff;     // f32 exponent\n  let mant = x & 0x007fffff;        // f32 mantissa\n\n  if (exp === 0xff) {\n    // Inf/NaN\n    const isNan = mant !== 0;\n    return sign | 0x7c00 | (isNan ? 0x0200 : 0);\n  }\n\n  if (exp === 0) {\n    // Zero/subnormal -> signed zero (fine for GA data)\n    return sign;\n  }\n\n  // Re-bias exponent: e = exp - 127 + 15 = exp - 112\n  let e = exp - 112;\n\n  if (e <= 0) {\n    if (e < -10) return sign; // underflow -> zero\n    mant = (mant | 0x00800000) >>> (1 - e); // add hidden 1, shift\n    if (mant & 0x00001000) mant += 0x00002000; // round-to-nearest-even\n    return sign | (mant >>> 13);\n  }\n\n  if (e >= 0x1f) {\n    // overflow -> Inf\n    return sign | 0x7c00;\n  }\n\n  // normal half with rounding\n  if (mant & 0x00001000) {\n    mant += 0x00002000;\n    if (mant & 0x00800000) {\n      mant = 0;\n      e += 1;\n      if (e >= 0x1f) return sign | 0x7c00;\n    }\n  }\n\n  return sign | (e << 10) | ((mant >>> 13) & 0x03ff);\n}\n\n/* Efficient writers using Uint16Array where possible */\n\nfunction packGaussiansF16(gaussians: Gaussian[]): Uint8Array {\n  const WORDS_PER = 10; // 10 halfs = 20 bytes\n  const u16 = new Uint16Array(gaussians.length * WORDS_PER);\n  let i = 0;\n  for (const g of gaussians) {\n    u16[i++] = f32_to_f16(g.xyz.x);\n    u16[i++] = f32_to_f16(g.xyz.y);\n    u16[i++] = f32_to_f16(g.xyz.z);\n    u16[i++] = f32_to_f16(g.opacity);\n    u16[i++] = f32_to_f16(g.cov[0]);\n    u16[i++] = f32_to_f16(g.cov[1]);\n    u16[i++] = f32_to_f16(g.cov[2]);\n    u16[i++] = f32_to_f16(g.cov[3]);\n    u16[i++] = f32_to_f16(g.cov[4]);\n    u16[i++] = f32_to_f16(g.cov[5]);\n  }\n  return new Uint8Array(u16.buffer);\n}\n\n// sh_coefs: Vec<[[f16;3];16]> per point => 96 bytes per point\nfunction packShCoefsF16(sh: SHBlock16[]): Uint8Array {\n  const WORDS_PER_POINT = 16 * 3; // 48 halfs = 96 bytes\n  const u16 = new Uint16Array(sh.length * WORDS_PER_POINT);\n  let i = 0;\n  for (const block of sh) {\n    // 16 fixed entries\n    for (let k = 0; k < 16; k++) {\n      const t = block[k];\n      u16[i++] = f32_to_f16(t[0]);\n      u16[i++] = f32_to_f16(t[1]);\n      u16[i++] = f32_to_f16(t[2]);\n    }\n  }\n  return new Uint8Array(u16.buffer);\n}\n\n// GaussianCompressed: 16 bytes each (mix of halfs + ints) \u2014 keep DataView here\nfunction packGaussiansCompressed(g: GaussianCompressed[]): Uint8Array {\n  const BYTES_PER = 16;\n  const buf = new ArrayBuffer(g.length * BYTES_PER);\n  const view = new DataView(buf);\n  let off = 0;\n  for (const v of g) {\n    view.setUint16(off + 0, f32_to_f16(v.xyz.x), true);\n    view.setUint16(off + 2, f32_to_f16(v.xyz.y), true);\n    view.setUint16(off + 4, f32_to_f16(v.xyz.z), true);\n    view.setInt8(off + 6, v.opacity);\n    view.setInt8(off + 7, v.scale_factor);\n    view.setUint32(off + 8, v.geometry_idx, true);\n    view.setUint32(off + 12, v.sh_idx, true);\n    off += BYTES_PER;\n  }\n  return new Uint8Array(buf);\n}\n\n/* plane_from_points (unchanged) */\nfunction plane_from_points(points: ReadonlyArray<Point3f32>): [Point3f32, Vector3f32 | null] {\n  const n = points.length;\n\n  let sumX = 0.0, sumY = 0.0, sumZ = 0.0;\n  for (const p of points) { sumX += p.x; sumY += p.y; sumZ += p.z; }\n  const centroid: Point3f32 = { x: sumX / (n || 1), y: sumY / (n || 1), z: sumZ / (n || 1) };\n  if (n < 3) return [centroid, null];\n\n  let xx = 0.0, xy = 0.0, xz = 0.0, yy = 0.0, yz = 0.0, zz = 0.0;\n  for (const p of points) {\n    const rx = p.x - centroid.x;\n    const ry = p.y - centroid.y;\n    const rz = p.z - centroid.z;\n    xx += rx * rx; xy += rx * ry; xz += rx * rz;\n    yy += ry * ry; yz += ry * rz;\n    zz += rz * rz;\n  }\n  xx /= n; xy /= n; xz /= n; yy /= n; yz /= n; zz /= n;\n\n  let wx = 0.0, wy = 0.0, wz = 0.0;\n\n  {\n    const det_x = yy * zz - yz * yz;\n    const ax = det_x, ay = xz * yz - xy * zz, az = xy * yz - xz * yy;\n    let w = det_x * det_x; if (wx * ax + wy * ay + wz * az < 0.0) w = -w;\n    wx += ax * w; wy += ay * w; wz += az * w;\n  }\n  {\n    const det_y = xx * zz - xz * xz;\n    const ax = xz * yz - xy * zz, ay = det_y, az = xy * xz - yz * xx;\n    let w = det_y * det_y; if (wx * ax + wy * ay + wz * az < 0.0) w = -w;\n    wx += ax * w; wy += ay * w; wz += az * w;\n  }\n  {\n    const det_z = xx * yy - xy * xy;\n    const ax = xy * yz - xz * yy, ay = xy * xz - yz * xx, az = det_z;\n    let w = det_z * det_z; if (wx * ax + wy * ay + wz * az < 0.0) w = -w;\n    wx += ax * w; wy += ay * w; wz += az * w;\n  }\n\n  const len = Math.hypot(wx, wy, wz);\n  if (!(len > 0) || !Number.isFinite(len)) return [centroid, null];\n\n  let nx = wx / len, ny = wy / len, nz = wz / len;\n  if (ny < 0.0) { nx = -nx; ny = -ny; nz = -nz; }\n\n  return [centroid, { x: nx, y: ny, z: nz }];\n}\n", "// scene.ts\nimport { mat3, vec2, vec3, quat } from 'gl-matrix';\nimport { PerspectiveCamera, PerspectiveProjection, focal2fov, fov2focal } from './camera';\nimport type { Point3f32 } from './pointcloud';\n\n// Define Vector2f32 locally if needed\ninterface Vector2f32 {\n  x: number;\n  y: number;\n}\n\nexport enum Split {\n  Train = 'train',\n  Test = 'test',\n}\n\nexport class SceneCamera {\n  public id: number;\n  public imgName: string;\n  public width: number;\n  public height: number;\n  public position: [number, number, number];\n  public rotation: [[number, number, number], [number, number, number], [number, number, number]];\n  public fx: number;\n  public fy: number;\n  public split: Split;\n\n  constructor(\n    id: number,\n    imgName: string,\n    width: number,\n    height: number,\n    position: [number, number, number],\n    rotation: [[number, number, number], [number, number, number], [number, number, number]],\n    fx: number,\n    fy: number,\n    split: Split = Split.Train\n  ) {\n    this.id = id;\n    this.imgName = imgName;\n    this.width = width;\n    this.height = height;\n    this.position = position;\n    this.rotation = rotation;\n    this.fx = fx;\n    this.fy = fy;\n    this.split = split;\n  }\n\n  static fromPerspective(\n    cam: PerspectiveCamera,\n    name: string,\n    id: number,\n    viewport: Vector2f32,\n    split: Split\n  ): SceneCamera {\n    const fx = fov2focal(cam.projection.fovx, viewport.x);\n    const fy = fov2focal(cam.projection.fovy, viewport.y);\n\n    const r = mat3.create();\n    mat3.fromQuat(r, cam.rotation);\n\n    const rotationArray: [[number, number, number], [number, number, number], [number, number, number]] = [\n      [r[0], r[1], r[2]],\n      [r[3], r[4], r[5]],\n      [r[6], r[7], r[8]],\n    ];\n\n    return new SceneCamera(\n      id,\n      name,\n      viewport.x,\n      viewport.y,\n      [cam.position[0], cam.position[1], cam.position[2]],\n      rotationArray,\n      fx,\n      fy,\n      split\n    );\n  }\n\n  toPerspectiveCamera(): PerspectiveCamera {\n    const fovx = focal2fov(this.fx, this.width);\n    const fovy = focal2fov(this.fy, this.height);\n\n    const r = mat3.fromValues(\n      this.rotation[0][0], this.rotation[0][1], this.rotation[0][2],\n      this.rotation[1][0], this.rotation[1][1], this.rotation[1][2],\n      this.rotation[2][0], this.rotation[2][1], this.rotation[2][2]\n    );\n\n    // Fix handedness if needed\n    if (mat3.determinant(r) < 0) {\n      r[1] = -r[1];  r[4] = -r[4];  r[7] = -r[7];\n    }\n\n    const q = quat.create();\n    // gl-matrix provides fromMat3 on quat (undocumented in some builds; if missing, convert via mat4)\n    if ((quat as any).fromMat3) {\n      (quat as any).fromMat3(q, r);\n    } else {\n      // Fallback: promote to mat4 then extract quaternion\n      const m00 = r[0], m01 = r[1], m02 = r[2];\n      const m10 = r[3], m11 = r[4], m12 = r[5];\n      const m20 = r[6], m21 = r[7], m22 = r[8];\n      const t = m00 + m11 + m22;\n      if (t > 0) {\n        const s = Math.sqrt(t + 1.0) * 2;\n        q[3] = 0.25 * s;\n        q[0] = (m21 - m12) / s;\n        q[1] = (m02 - m20) / s;\n        q[2] = (m10 - m01) / s;\n      } else if (m00 > m11 && m00 > m22) {\n        const s = Math.sqrt(1.0 + m00 - m11 - m22) * 2;\n        q[3] = (m21 - m12) / s;\n        q[0] = 0.25 * s;\n        q[1] = (m01 + m10) / s;\n        q[2] = (m02 + m20) / s;\n      } else if (m11 > m22) {\n        const s = Math.sqrt(1.0 + m11 - m00 - m22) * 2;\n        q[3] = (m02 - m20) / s;\n        q[0] = (m01 + m10) / s;\n        q[1] = 0.25 * s;\n        q[2] = (m12 + m21) / s;\n      } else {\n        const s = Math.sqrt(1.0 + m22 - m00 - m11) * 2;\n        q[3] = (m10 - m01) / s;\n        q[0] = (m02 + m20) / s;\n        q[1] = (m12 + m21) / s;\n        q[2] = 0.25 * s;\n      }\n    }\n    quat.normalize(q, q);\n\n    const pos = vec3.fromValues(this.position[0], this.position[1], this.position[2]);\n    const proj = PerspectiveProjection.new(\n      vec2.fromValues(this.width, this.height),\n      vec2.fromValues(fovx, fovy),\n      0.01,\n      100.0\n    );\n    return new PerspectiveCamera(pos, q, proj);\n  }\n\n  hash(): string {\n    return JSON.stringify({\n      imgName: this.imgName,\n      width: this.width,\n      height: this.height,\n      position: this.position,\n      rotation: this.rotation,\n      fx: this.fx,\n      fy: this.fy,\n      split: this.split,\n    });\n  }\n\n  clone(): SceneCamera {\n    return new SceneCamera(\n      this.id,\n      this.imgName,\n      this.width,\n      this.height,\n      [...this.position],\n      [\n        [...this.rotation[0]],\n        [...this.rotation[1]],\n        [...this.rotation[2]],\n      ] as [[number, number, number], [number, number, number], [number, number, number]],\n      this.fx,\n      this.fy,\n      this.split\n    );\n  }\n}\n\nexport class Scene {\n  private cameras: Map<number, SceneCamera>;\n  private extend: number;\n\n  constructor(cameras: SceneCamera[]) {\n    this.extend = this.calculateMaxDistance(\n      cameras.map(c => ({ x: c.position[0], y: c.position[1], z: c.position[2] }))\n    );\n    this.cameras = new Map();\n    for (const camera of cameras) {\n      if (this.cameras.has(camera.id)) {\n        console.warn(`Duplicate camera id ${camera.id} in scene (duplicates were removed)`);\n      }\n      this.cameras.set(camera.id, camera);\n    }\n  }\n\n  static fromCameras(cameras: SceneCamera[]): Scene { return new Scene(cameras); }\n\n  static fromJson(jsonData: any[]): Scene {\n    const cameras: SceneCamera[] = [];\n    for (let i = 0; i < jsonData.length; i++) {\n      const d = jsonData[i];\n      const split = i % 8 === 0 ? Split.Test : Split.Train; // Kerbl et al.\n      cameras.push(new SceneCamera(\n        d.id ?? i,\n        d.img_name ?? `image_${i}`,\n        d.width, d.height,\n        d.position,\n        d.rotation,\n        d.fx, d.fy,\n        split\n      ));\n    }\n    console.log(`Loaded scene file with ${cameras.length} views`);\n    return new Scene(cameras);\n  }\n\n  camera(id: number): SceneCamera | undefined {\n    const c = this.cameras.get(id);\n    return c ? c.clone() : undefined;\n  }\n\n  numCameras(): number { return this.cameras.size; }\n\n  getCameras(split?: Split): SceneCamera[] {\n    let cams = Array.from(this.cameras.values());\n    if (split !== undefined) cams = cams.filter(c => c.split === split);\n    cams = cams.map(c => c.clone());\n    cams.sort((a, b) => a.id - b.id);\n    return cams;\n  }\n\n  getExtend(): number { return this.extend; }\n\n  nearestCamera(pos: Point3f32, split?: Split): number | undefined {\n    let minD = Number.POSITIVE_INFINITY;\n    let nearest: number | undefined;\n    for (const c of this.cameras.values()) {\n      if (split !== undefined && c.split !== split) continue;\n      const cp = { x: c.position[0], y: c.position[1], z: c.position[2] };\n      const d2 = this.distance2(pos, cp);\n      if (d2 < minD) { minD = d2; nearest = c.id; }\n    }\n    return nearest;\n  }\n\n  private distance2(a: Point3f32, b: Point3f32): number {\n    const dx = a.x - b.x, dy = a.y - b.y, dz = a.z - b.z;\n    return dx*dx + dy*dy + dz*dz;\n  }\n\n  private calculateMaxDistance(points: Point3f32[]): number {\n    let maxD = 0;\n    for (let i = 0; i < points.length; i++) {\n      for (let j = i + 1; j < points.length; j++) {\n        maxD = Math.max(maxD, Math.sqrt(this.distance2(points[i], points[j])));\n      }\n    }\n    return maxD;\n  }\n}\n\nexport class SceneUtils {\n  static async loadFromFile(filePath: string): Promise<Scene> {\n    const res = await fetch(filePath);\n    if (!res.ok) throw new Error(`Failed to load scene file: ${res.statusText}`);\n    const json = await res.json();\n    return Scene.fromJson(json);\n  }\n\n  static sceneToJson(scene: Scene): any[] {\n    return scene.getCameras().map(c => ({\n      id: c.id,\n      img_name: c.imgName,\n      width: c.width,\n      height: c.height,\n      position: c.position,\n      rotation: c.rotation,\n      fx: c.fx,\n      fy: c.fy,\n    }));\n  }\n\n  static createTestScene(): Scene {\n    const cams: SceneCamera[] = [\n      new SceneCamera(0, 'test_0.jpg', 800, 600, [0, 0, 5],\n        [[1,0,0],[0,1,0],[0,0,1]], 400, 400, Split.Train),\n      new SceneCamera(1, 'test_1.jpg', 800, 600, [3, 0, 4],\n        [[0.8,0,0.6],[0,1,0],[-0.6,0,0.8]], 400, 400, Split.Test),\n      new SceneCamera(2, 'test_2.jpg', 800, 600, [-3, 0, 4],\n        [[0.8,0,-0.6],[0,1,0],[0.6,0,0.8]], 400, 400, Split.Train),\n    ];\n    return Scene.fromCameras(cams);\n  }\n}\n", "// lib.ts \u2014 1:1 surface port of lib.rs adapted to your TS APIs\n// Updated: exact Rust FOVs at init + two-phase init (800x600 \u2192 real size)\n\nimport { vec2, vec3, quat } from 'gl-matrix';\nimport { GaussianRenderer, SplattingArgs, Display } from './renderer';\nimport { PointCloud } from './pointcloud';\nimport { Camera, PerspectiveCamera, PerspectiveProjection } from './camera';\nimport { CameraController, KeyCode } from './controller';\nimport * as io from './io/mod';\nimport { Animation /*, TrackingShot, Transition*/ } from './animation';\nimport { Scene, SceneCamera, Split } from './scene';\n// key_to_num imported but not used in this TS-only build (kept for 1:1 surface)\nimport { key_to_num, GPUStopwatch } from './utils';\n\n// --- helpers to bridge {x,y,z} <-> gl-matrix tuples ---\nconst v3 = (p: { x: number; y: number; z: number }): vec3 =>\n  vec3.fromValues(p.x, p.y, p.z);\nconst near = (a: number, b: number, eps = 1e-4) => Math.abs(a - b) <= eps;\nconst nearVec3 = (a: vec3, b: vec3, eps = 1e-4) =>\n  near(a[0], b[0], eps) && near(a[1], b[1], eps) && near(a[2], b[2], eps);\nconst nearQuat = (a: quat, b: quat, eps = 1e-4) =>\n  near(a[0], b[0], eps) && near(a[1], b[1], eps) && near(a[2], b[2], eps) && near(a[3], b[3], eps);\n\n/* ------------------------------- No-op UI shims ------------------------------ */\ntype FullOutput = unknown;\nclass EguiWGPU {\n  constructor(_device: GPUDevice, _fmt: GPUTextureFormat, _canvas: HTMLCanvasElement) {}\n  begin_frame(_w: HTMLCanvasElement) {}\n  end_frame(_w: HTMLCanvasElement): FullOutput { return {}; }\n  prepare(_size: { width: number; height: number }, _scale: number, _dev: GPUDevice, _q: GPUQueue, _enc: GPUCommandEncoder, shapes: FullOutput) { return shapes; }\n  render(_pass: GPURenderPassEncoder, _state: FullOutput) {}\n  cleanup(_state: FullOutput) {}\n}\nconst ui = { ui: (_wc: unknown) => false };\n/* --------------------------------------------------------------------------- */\n\nexport class RenderConfig {\n  constructor(\n    public no_vsync: boolean,\n    public skybox: string | null = null,\n    public hdr: boolean = false\n  ) {}\n}\n\nexport class WGPUContext {\n  device!: GPUDevice;\n  queue!: GPUQueue;\n  adapter!: GPUAdapter;\n\n  static async new_instance(): Promise<WGPUContext> {\n    return WGPUContext.new(undefined, undefined);\n  }\n\n  static async new(_instance?: unknown, _surface?: GPUCanvasContext | null): Promise<WGPUContext> {\n    if (!('gpu' in navigator)) throw new Error('WebGPU not available');\n    const adapter = await navigator.gpu.requestAdapter();\n    if (!adapter) throw new Error('No WebGPU adapter');\n\n    // Mirror wasm limits we rely on (keep permissive for browser portability)\n    const device = await adapter.requestDevice({\n      requiredLimits: { maxComputeWorkgroupStorageSize: 1 << 15 } // 32768\n    });\n\n    const ctx = new WGPUContext();\n    ctx.adapter = adapter;\n    ctx.device = device;\n    ctx.queue = device.queue;\n    return ctx;\n  }\n}\n\ntype SurfaceConfiguration = {\n  format: GPUTextureFormat;\n  width: number;\n  height: number;\n  present_mode: 'auto' | 'auto-vsync' | 'auto-no-vsync';\n  alpha_mode: GPUCanvasAlphaMode;\n  view_formats: GPUTextureFormat[];\n};\n\nexport class WindowContext {\n  private wgpu_context!: WGPUContext;\n  private surface!: GPUCanvasContext;\n  private config!: SurfaceConfiguration;\n  private window!: HTMLCanvasElement;\n  private scale_factor!: number;\n\n  private pc!: PointCloud;\n  private pointcloud_file_path: string | null = null;\n  private renderer!: GaussianRenderer;\n  private animation: [Animation<PerspectiveCamera>, boolean] | null = null;\n  private controller!: CameraController;\n  private scene: Scene | null = null;\n  private scene_file_path: string | null = null;\n  private current_view: number | null = null;\n  private ui_renderer!: EguiWGPU;\n  private fps = 0;\n  private ui_visible = true;\n\n  private display!: Display;\n\n  private splatting_args!: SplattingArgs;\n\n  private saved_cameras: SceneCamera[] = [];\n  private stopwatch: GPUStopwatch | null = null;\n\n  // --------- PERF: incremental change tracking instead of JSON stringify -------\n  private _lastCamPos: vec3 = vec3.create();\n  private _lastCamRot: quat = quat.create();\n  private _lastWalltime = 0;\n  private _changed = true; // force first frame\n  // ---------------------------------------------------------------------------\n\n  static async new(\n    window: HTMLCanvasElement,\n    pc_file: any,\n    render_config: RenderConfig\n  ): Promise<WindowContext> {\n    const state = new WindowContext();\n\n    // Use the canvas backing store size if present, otherwise derive from CSS box (no DPR).\n    const rect = window.getBoundingClientRect();\n    const size = {\n      width:  Math.max(1, window.width  || Math.floor(rect.width)  || 800),\n      height: Math.max(1, window.height || Math.floor(rect.height) || 600),\n    };\n\n    state.window = window;\n    // Keep a UI scaling factor like Rust's winit path; not used for render resolution.\n    state.scale_factor = window.ownerDocument?.defaultView?.devicePixelRatio ?? 1;\n\n    const surface = window.getContext('webgpu') as GPUCanvasContext;\n    if (!surface) throw new Error('WebGPU canvas context unavailable');\n\n    const wgpu_context = await WGPUContext.new(undefined, surface);\n\n    const surface_format = navigator.gpu.getPreferredCanvasFormat();\n    const render_format: GPUTextureFormat = render_config.hdr ? 'rgba16float' : 'rgba8unorm';\n\n    // Match Rust: draw to a linear (non-sRGB) intermediate; surface exposes both\n    surface.configure({\n      device: wgpu_context.device,\n      format: surface_format,\n      alphaMode: 'opaque',\n      viewFormats: [deSRGB(surface_format)]\n    });\n\n    state.wgpu_context = wgpu_context;\n    state.surface = surface;\n    state.config = {\n      format: surface_format,\n      width: size.width,\n      height: size.height,\n      present_mode: render_config.no_vsync ? 'auto-no-vsync' : 'auto-vsync',\n      alpha_mode: 'opaque',\n      view_formats: [deSRGB(surface_format)]\n    };\n\n    const pc_raw =\n      (await (io as any).GenericGaussianPointCloud?.load?.(pc_file)) ?? pc_file;\n    state.pc = await PointCloud.new(wgpu_context.device, pc_raw);\n\n    state.renderer = await GaussianRenderer.create(\n      wgpu_context.device,\n      wgpu_context.queue,\n      render_format,\n      state.pc.shDeg(),\n      state.pc.compressed()\n    );\n\n    // ---- Initial camera (Rust parity for FOVs) ----\n    // Rust: PerspectiveProjection::new(viewport, (Deg(45), Deg(45 / aspect)), 0.01, 1000)\n    const aabb = state.pc.bbox();\n    const aspect = size.width / Math.max(1, size.height);\n\n    const c0v = aabb.center();\n    const c0 = vec3.fromValues(c0v.x, c0v.y, c0v.z);\n    const r = aabb.radius();\n    const eyeTuple: vec3 = vec3.fromValues(c0[0] - r * 0.5, c0[1] - r * 0.5, c0[2] - r * 0.5);\n    const rot: quat = quat.create();\n\n    const deg2rad = (d: number) => (d * Math.PI) / 180;\n    const fovx = deg2rad(45);\n    const fovy = deg2rad(45 / Math.max(1e-6, aspect));\n\n    const proj = PerspectiveProjection.new(\n      vec2.fromValues(size.width, size.height),\n      vec2.fromValues(fovx, fovy),\n      0.01,\n      1000\n    );\n\n    const view_camera = new PerspectiveCamera(eyeTuple, rot, proj);\n\n    const controller = new CameraController(0.1, 0.05);\n    const c = state.pc.center();\n    controller.center = vec3.fromValues(c.x, c.y, c.z);\n    state.controller = controller;\n\n    state.ui_renderer = new EguiWGPU(wgpu_context.device, surface_format, window);\n\n    state.display = await Display.create(\n      wgpu_context.device,\n      render_format,\n      deSRGB(surface_format),\n      size.width,\n      size.height\n    );\n\n    state.stopwatch = new GPUStopwatch(wgpu_context.device, 3);\n\n    state.splatting_args = {\n      camera: view_camera,\n      viewport: vec2.fromValues(size.width, size.height),\n      gaussianScaling: 1.0,\n      maxShDeg: state.pc.shDeg(),\n      showEnvMap: false,\n      mipSplatting: undefined,\n      kernelSize: undefined,\n      clippingBox: undefined,\n      walltime: 0.0,\n      sceneCenter: undefined,\n      sceneExtend: undefined,\n      backgroundColor: { r: 0, g: 0, b: 0, a: 1 },\n      resolution: vec2.fromValues(size.width, size.height)\n    };\n\n    // snapshot baseline for change tracking\n    vec3.copy(state._lastCamPos, state.splatting_args.camera.position as vec3);\n    quat.copy(state._lastCamRot, state.splatting_args.camera.rotation as quat);\n    state._lastWalltime = state.splatting_args.walltime;\n\n    return state;\n  }\n\n  reload(): void {\n    if (!this.pointcloud_file_path) throw new Error('no pointcloud file path present');\n    console.info('reloading volume from', this.pointcloud_file_path);\n    if (this.scene_file_path) {\n      console.info('reloading scene from', this.scene_file_path);\n    }\n  }\n\n  resize(new_size: { width: number; height: number }, scale_factor?: number): void {\n    if (new_size.width > 0 && new_size.height > 0) {\n      this.config.width = new_size.width;\n      this.config.height = new_size.height;\n\n      // Reconfigure the surface (mirrors Rust wgpu SurfaceConfiguration semantics).\n      this.surface.configure({\n        device: this.wgpu_context.device,\n        format: this.config.format,\n        alphaMode: this.config.alpha_mode,\n        viewFormats: this.config.view_formats\n      });\n\n      // Resize our linear offscreen and update camera params.\n      this.display.resize(this.wgpu_context.device, new_size.width, new_size.height);\n\n      this.splatting_args.camera.projection.resize(new_size.width, new_size.height);\n      // reuse viewport vec2 (avoid allocation)\n      this.splatting_args.viewport[0] = new_size.width;\n      this.splatting_args.viewport[1] = new_size.height;\n\n      // mark changed because viewport/camera matrices updated\n      this._changed = true;\n    }\n    if (scale_factor !== undefined && scale_factor > 0) {\n      this.scale_factor = scale_factor;\n    }\n  }\n\n  ui(): [boolean, FullOutput] {\n    this.ui_renderer.begin_frame(this.window);\n    const request_redraw = ui.ui(this);\n    const shapes = this.ui_renderer.end_frame(this.window);\n    return [request_redraw, shapes];\n  }\n\n  update(dt_seconds: number): void {\n    const dt = dt_seconds;\n\n    if (this.splatting_args.walltime < 5.0) {\n      this.splatting_args.walltime += dt;\n    }\n\n    if (this.animation) {\n      const [next_camera, playing] = this.animation;\n      if ((this.controller as any).user_inptut) {\n        this.cancle_animation();\n      } else {\n        const adv = playing ? dt : 0.0;\n        this.splatting_args.camera = next_camera.update(adv);\n        this.splatting_args.camera.projection.resize(this.config.width, this.config.height);\n        if (next_camera.done()) {\n          this.animation = null;\n          this.controller.reset_to_camera(this.splatting_args.camera);\n        }\n      }\n    } else {\n      this.controller.update_camera(this.splatting_args.camera, dt);\n\n      // check if camera moved out of selected view\n      if (this.current_view != null && this.scene) {\n        const cam = this.scene.camera(this.current_view);\n        if (cam) {\n          const scene_camera = (cam as any).toPerspective ? (cam as any).toPerspective() : cam;\n          const aPos: vec3 = this.splatting_args.camera.position as vec3;\n          const bPos: vec3 = Array.isArray((scene_camera as any).position)\n            ? ((scene_camera as any).position as vec3)\n            : v3((scene_camera as any).position);\n          const pos_change = !nearVec3(aPos, bPos, 1e-4);\n          if (pos_change) this.current_view = null;\n        }\n      }\n    }\n\n    const aabb = this.pc.bbox();\n    this.splatting_args.camera.fit_near_far(aabb);\n\n    // --- update change tracking (pos/rot or walltime changes) ---\n    const pos = this.splatting_args.camera.position as vec3;\n    const rot = this.splatting_args.camera.rotation as quat;\n    if (!nearVec3(this._lastCamPos, pos) || !nearQuat(this._lastCamRot, rot) ||\n        this.splatting_args.walltime !== this._lastWalltime) {\n      vec3.copy(this._lastCamPos, pos);\n      quat.copy(this._lastCamRot, rot);\n      this._lastWalltime = this.splatting_args.walltime;\n      this._changed = true;\n    }\n  }\n\n  render(redraw_scene: boolean, shapes?: FullOutput): void {\n    this.stopwatch?.reset();\n\n    const texture = (this.surface as any).getCurrentTexture?.();\n    if (!texture) return;\n\n    const view_rgb  = texture.createView({ format: deSRGB(this.config.format) });\n    const view_srgb = texture.createView();\n\n    const encoder = this.wgpu_context.device.createCommandEncoder({\n      label: 'render command encoder'\n    });\n\n    if (redraw_scene) {\n      // Prepare: preprocess + sort + copy instanceCount into indirect buffer\n      this.renderer.prepare(\n        encoder,\n        this.wgpu_context.device,\n        this.wgpu_context.queue,\n        this.pc,\n        this.splatting_args,\n        this.stopwatch ?? undefined\n      );\n    }\n\n    let ui_state: FullOutput | null = null;\n    if (shapes) {\n      // Use our tracked size + scale factor; some browsers don't expose texture.size here.\n      ui_state = this.ui_renderer.prepare(\n        { width: this.config.width, height: this.config.height },\n        this.scale_factor,\n        this.wgpu_context.device,\n        this.wgpu_context.queue,\n        encoder,\n        shapes\n      );\n    }\n\n    if (this.stopwatch) this.stopwatch.start(encoder, 'rasterization');\n    if (redraw_scene) {\n      const pass = encoder.beginRenderPass({\n        label: 'render pass',\n        colorAttachments: [{\n          view: this.display.texture(),\n          clearValue: this.splatting_args.backgroundColor,\n          loadOp: 'clear',\n          storeOp: 'store'\n        }]\n      });\n      this.renderer.render(pass, this.pc);\n      pass.end();\n    }\n    if (this.stopwatch) this.stopwatch.stop(encoder, 'rasterization');\n\n    // Access camera/settings bind groups from GaussianRenderer\u2019s uniforms\n    const cameraBG   = this.renderer.camera().bind_group();\n    const settingsBG = this.renderer.render_settings().bind_group();\n\n    // Composite to the swapchain\n    this.display.render(\n      encoder,\n      view_rgb,\n      this.splatting_args.backgroundColor,\n      cameraBG,\n      settingsBG\n    );\n\n    this.stopwatch?.end(encoder);\n\n    // UI overlay (sRGB)\n    if (ui_state) {\n      const pass = encoder.beginRenderPass({\n        label: 'render pass ui',\n        colorAttachments: [{ view: view_srgb, loadOp: 'load', storeOp: 'store' }]\n      });\n      this.ui_renderer.render(pass, ui_state);\n      pass.end();\n    }\n    if (ui_state) this.ui_renderer.cleanup(ui_state);\n\n    // ---- Submit GPU work for this frame ----\n    this.wgpu_context.queue.submit([encoder.finish()]);\n\n    // Keep args in sync (avoid allocation)\n    this.splatting_args.resolution[0] = this.config.width;\n    this.splatting_args.resolution[1] = this.config.height;\n\n    // frame rendered; reset change flag\n    this._changed = false;\n  }\n\n  private set_scene(scene: Scene): void {\n    // Prefer scene-provided extent if available to mirror Rust; else fall back to pc radius\n    const extend = (scene as any).extend ? (scene as any).extend() : this.pc.bbox().radius();\n    this.splatting_args.sceneExtend = extend;\n\n    // Center: average scene cameras if available, else pc.center()\n    const n = scene.numCameras();\n    let acc = { x: 0, y: 0, z: 0 };\n    let cnt = 0;\n    for (let i = 0; i < n; i++) {\n      const c = scene.camera(i);\n      if (c) {\n        acc.x += c.position[0];\n        acc.y += c.position[1];\n        acc.z += c.position[2];\n        cnt++;\n      }\n    }\n    const center = cnt > 0 ? { x: acc.x / cnt, y: acc.y / cnt, z: acc.z / cnt } : this.pc.center();\n    this.controller.center = vec3.fromValues(center.x, center.y, center.z);\n\n    this.scene = scene;\n    if (this.saved_cameras.length === 0) {\n      const arr: SceneCamera[] = [];\n      for (let i = 0; i < scene.numCameras(); i++) {\n        const c = scene.camera(i);\n        if (c && (c.split === undefined || c.split === Split.Test)) arr.push(c);\n      }\n      this.saved_cameras = arr;\n    }\n    this._changed = true;\n  }\n\n  // NEW: parity helper to jump to a scene camera (no animation for simplicity)\n  private set_scene_camera(i: number): void {\n    if (!this.scene) return;\n    this.current_view = i;\n    const cam = this.scene.camera(i);\n    if (!cam) return;\n\n    // Try SceneCamera.toPerspective() first if available\n    const anyCam: any = cam as any;\n    if (typeof anyCam.toPerspective === 'function') {\n      const pc: PerspectiveCamera = anyCam.toPerspective();\n      this.update_camera(pc);\n      return;\n    }\n\n    // Otherwise, build a PerspectiveCamera from the SceneCamera fields\n    const pos = Array.isArray(cam.position)\n      ? vec3.fromValues(cam.position[0], cam.position[1], cam.position[2])\n      : v3(cam.position as any);\n    const rot = Array.isArray(cam.rotation)\n      ? quat.fromValues(cam.rotation[0], cam.rotation[1], cam.rotation[2], cam.rotation[3])\n      : (cam.rotation as any as quat);\n\n    // Reuse current projection (Rust also keeps projection except for resize)\n    const proj = this.splatting_args.camera.projection;\n    const pc = new PerspectiveCamera(pos, rot, proj);\n    this.update_camera(pc);\n  }\n\n  private async set_env_map(_path: string): Promise<void> {\n    // Stub \u2014 hook your EXR/HDR decode pipeline here if needed\n    this.splatting_args.showEnvMap = true;\n    this._changed = true;\n  }\n\n  private cancle_animation(): void {\n    this.animation = null;\n    this.controller.reset_to_camera(this.splatting_args.camera);\n    this._changed = true;\n  }\n\n  private stop_animation(): void {\n    if (this.animation) this.animation[1] = false;\n    this.controller.reset_to_camera(this.splatting_args.camera);\n    this._changed = true;\n  }\n\n  private update_camera(camera: PerspectiveCamera): void {\n    this.splatting_args.camera = camera;\n    this.splatting_args.camera.projection.resize(this.config.width, this.config.height);\n    this._changed = true;\n  }\n\n  private save_view(): void {\n    const sceneArr: SceneCamera[] = [];\n    if (this.scene) for (let i = 0; i < this.scene.numCameras(); i++) {\n      const c = this.scene.camera(i);\n      if (c) sceneArr.push(c);\n    }\n    const max_scene_id = sceneArr.reduce((m, c) => Math.max(m, c.id ?? 0), 0);\n    const max_id = this.saved_cameras.reduce((m, c) => Math.max(m, c.id ?? 0), 0);\n    const id = Math.max(max_id, max_scene_id) + 1;\n\n    const cam = SceneCamera.fromPerspective(\n      this.splatting_args.camera,\n      String(id),\n      id,\n      { x: this.config.width, y: this.config.height } as any,\n      Split.Test\n    );\n    this.saved_cameras.push(cam);\n  }\n}\n\nexport function smoothstep(x: number): number {\n  return x * x * (3.0 - 2.0 * x);\n}\n\n/* --------------------------- input binding helper --------------------------- */\n\nfunction bind_input(canvas: HTMLCanvasElement, controller: CameraController) {\n  // Ensure keyboard focus can land on the canvas\n  if (!canvas.hasAttribute('tabindex')) canvas.tabIndex = 0;\n\n  let pressedPointerId: number | null = null;\n\n  const DEBUG = true; // flip to false to silence logs\n  const log = (...args: any[]) => { if (DEBUG) console.debug('[input]', ...args); };\n\n  const mapCode = (code: string): KeyCode | undefined => {\n    switch (code) {\n      case 'KeyW': case 'KeyS': case 'KeyA': case 'KeyD':\n      case 'ArrowUp': case 'ArrowDown': case 'ArrowLeft': case 'ArrowRight':\n      case 'KeyQ': case 'KeyE': case 'Space': case 'ShiftLeft':\n        return code as KeyCode;\n      default:\n        return undefined;\n    }\n  };\n\n  const updateAlt = (e: KeyboardEvent | PointerEvent | WheelEvent) => {\n    // Mirror winit's modifier tracking by sampling altKey on each event\n    // @ts-ignore\n    controller.alt_pressed = !!(e as any).altKey;\n  };\n\n  // Keyboard\n  const onKeyDown = (e: KeyboardEvent) => {\n    updateAlt(e);\n    const code = mapCode(e.code);\n    if (!code) return;\n    if (controller.process_keyboard(code, true)) {\n      log('keydown', code);\n      e.preventDefault();\n    }\n  };\n  const onKeyUp = (e: KeyboardEvent) => {\n    updateAlt(e);\n    const code = mapCode(e.code);\n    if (!code) return;\n    if (controller.process_keyboard(code, false)) {\n      log('keyup', code);\n      e.preventDefault();\n    }\n  };\n\n  // Pointer (mouse/touch/pen)\n  const onPointerDown = (e: PointerEvent) => {\n    updateAlt(e);\n    canvas.focus();\n    pressedPointerId = e.pointerId;\n    try { canvas.setPointerCapture(e.pointerId); } catch {}\n    if (e.button === 0) controller.left_mouse_pressed  = true;\n    if (e.button === 2) controller.right_mouse_pressed = true;\n    log('pointerdown', e.button, 'alt=', controller.alt_pressed);\n    e.preventDefault();\n  };\n  const onPointerMove = (e: PointerEvent) => {\n    updateAlt(e);\n    const dx = e.movementX ?? 0;\n    const dy = e.movementY ?? 0;\n    if (controller.left_mouse_pressed || controller.right_mouse_pressed) {\n      controller.process_mouse(dx, dy);\n      log('pointermove', dx, dy);\n      e.preventDefault();\n    }\n  };\n  const onPointerUp = (e: PointerEvent) => {\n    updateAlt(e);\n    if (pressedPointerId === e.pointerId) {\n      try { canvas.releasePointerCapture(e.pointerId); } catch {}\n      pressedPointerId = null;\n    }\n    if (e.button === 0) controller.left_mouse_pressed  = false;\n    if (e.button === 2) controller.right_mouse_pressed = false;\n    log('pointerup', e.button);\n    e.preventDefault();\n  };\n\n  // Prevent browser context menu so right-drag pans like in Rust\n  const onContextMenu = (e: MouseEvent) => { e.preventDefault(); };\n\n  // Wheel\n  const onWheel = (e: WheelEvent) => {\n    updateAlt(e);\n    controller.process_scroll(e.deltaY / 100);\n    log('wheel', e.deltaY);\n    e.preventDefault(); // stop page scroll\n  };\n\n  // Blur: clear pressed flags similar to losing focus in winit\n  const onWindowBlur = () => {\n    controller.left_mouse_pressed = false;\n    controller.right_mouse_pressed = false;\n  };\n\n  // Attach\n  window.addEventListener('keydown', onKeyDown, { capture: true });\n  window.addEventListener('keyup', onKeyUp, { capture: true });\n  window.addEventListener('blur', onWindowBlur);\n\n  canvas.addEventListener('pointerdown', onPointerDown);\n  canvas.addEventListener('pointermove', onPointerMove);\n  canvas.addEventListener('pointerup', onPointerUp);\n  canvas.addEventListener('contextmenu', onContextMenu);\n  canvas.addEventListener('wheel', onWheel, { passive: false });\n\n  // Return unbind if you need teardown later\n  return () => {\n    window.removeEventListener('keydown', onKeyDown, { capture: true } as any);\n    window.removeEventListener('keyup', onKeyUp, { capture: true } as any);\n    window.removeEventListener('blur', onWindowBlur);\n\n    canvas.removeEventListener('pointerdown', onPointerDown);\n    canvas.removeEventListener('pointermove', onPointerMove);\n    canvas.removeEventListener('pointerup', onPointerUp);\n    canvas.removeEventListener('contextmenu', onContextMenu);\n    canvas.removeEventListener('wheel', onWheel as any);\n  };\n}\n\n/* --------------------------------------------------------------------------- */\n\nexport async function open_window(\n  file: any,\n  scene: any | null,\n  config: RenderConfig,\n  pointcloud_file_path: string | null,\n  scene_file_path: string | null\n): Promise<void> {\n  const canvas = (document.getElementById('window-canvas') as HTMLCanvasElement) ??\n    (() => {\n      const c = document.createElement('canvas');\n      c.id = 'window-canvas';\n      c.style.width = '100%';\n      c.style.height = '100%';\n      document.body.appendChild(c);\n      return c;\n    })();\n\n  // Real backing store = CSS * DPR (what we *actually* want to render)\n  const backingFromCss = () => {\n    const rect = canvas.getBoundingClientRect();\n    const dpr = window.devicePixelRatio || 1;\n    return {\n      w: Math.max(1, Math.floor(rect.width  * dpr)),\n      h: Math.max(1, Math.floor(rect.height * dpr)),\n      dpr\n    };\n  };\n\n  // --- TWO-PHASE INIT to mimic Rust ---\n  // Phase 0: capture real size we\u2019ll use *after* initialization.\n  const { w: realW, h: realH, dpr: realDpr } = backingFromCss();\n\n  // Phase 1: initialize at 800x600 like Rust does before the wasm canvas resize.\n  const initW = 800, initH = 600;\n  canvas.width = initW;\n  canvas.height = initH;\n\n  const state = await WindowContext.new(canvas, file, config);\n\n  const _unbindInput = bind_input(canvas, (state as any)['controller'] as CameraController);\n\n  // Phase 2: immediately resize to the real backing-store size\n  const applyRealSize = () => {\n    const now = backingFromCss();\n    if (canvas.width !== now.w)  canvas.width  = now.w;\n    if (canvas.height !== now.h) canvas.height = now.h;\n    state.resize({ width: now.w, height: now.h }, now.dpr);\n  };\n  applyRealSize();\n\n  const ro = new ResizeObserver(applyRealSize);\n  ro.observe(canvas);\n  addEventListener('resize', applyRealSize, { passive: true });\n  addEventListener('orientationchange', applyRealSize, { passive: true });\n\n  (state as any).pointcloud_file_path = pointcloud_file_path;\n\n  if (scene) {\n    try {\n      const s = await (Scene as any).fromJson(scene);\n      (state as any)['set_scene'](s);\n      // NEW: switch to scene camera 0 like Rust\n      (state as any)['set_scene_camera']?.(0);\n      (state as any).scene_file_path = scene_file_path;\n    } catch (err) {\n      console.error('cannot load scene:', err);\n    }\n  }\n\n  if (config.skybox) {\n    try {\n      await (state as any)['set_env_map'](config.skybox);\n    } catch (e) {\n      console.error('failed to set skybox:', e);\n    }\n  }\n\n  let last = performance.now();\n  const loop = () => {\n    const now = performance.now();\n    const dt = (now - last) / 1000.0;\n    last = now;\n\n    (state as any).update(dt);\n\n    const [redraw_ui, shapes] = (state as any).ui();\n    const res = (state as any)['splatting_args'].resolution as Float32Array | [number, number];\n    const resChange =\n      (res as any)[0] !== (state as any)['config'].width ||\n      (res as any)[1] !== (state as any)['config'].height;\n\n    const request_redraw = (state as any)._changed || resChange;\n\n    if (request_redraw || redraw_ui) {\n      (state as any)['fps'] = (1.0 / Math.max(1e-6, dt)) * 0.05 + (state as any)['fps'] * 0.95;\n      (state as any).render(request_redraw, (state as any)['ui_visible'] ? shapes : undefined);\n    }\n    requestAnimationFrame(loop);\n  };\n  requestAnimationFrame(loop);\n}\n\nexport async function run_wasm(\n  pc: ArrayBuffer,\n  scene: ArrayBuffer | null,\n  pc_file: string | null,\n  scene_file: string | null\n): Promise<void> {\n  await open_window(\n    pc,\n    scene,\n    new RenderConfig(false, null, false),\n    pc_file,\n    scene_file\n  );\n}\n\n/* --------------------------------- helpers --------------------------------- */\n\nfunction deSRGB(fmt: GPUTextureFormat): GPUTextureFormat {\n  if (fmt === 'bgra8unorm-srgb') return 'bgra8unorm';\n  if (fmt === 'rgba8unorm-srgb') return 'rgba8unorm';\n  return fmt;\n}\n"],
  "mappings": "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",
  "names": ["scale", "add", "adjoint", "clone", "copy", "create", "determinant", "equals", "exactEquals", "frob", "fromQuat", "fromRotation", "fromScaling", "fromTranslation", "fromValues", "identity", "invert", "mul", "multiply", "multiplyScalar", "multiplyScalarAndAdd", "rotate", "scale", "set", "str", "sub", "subtract", "translate", "transpose", "create", "clone", "copy", "fromValues", "set", "identity", "transpose", "invert", "adjoint", "determinant", "multiply", "translate", "scale", "rotate", "len", "fromTranslation", "fromScaling", "fromRotation", "fromQuat", "near", "str", "frob", "add", "subtract", "multiplyScalar", "multiplyScalarAndAdd", "exactEquals", "equals", "mul", "sub", "add", "clone", "copy", "create", "dot", "equals", "exactEquals", "fromValues", "identity", "invert", "len", "length", "lerp", "mul", "multiply", "normalize", "random", "rotateX", "rotateY", "rotateZ", "scale", "set", "slerp", "sqrLen", "squaredLength", "str", "add", "clone", "copy", "create", "equals", "exactEquals", "fromValues", "mul", "multiply", "rotateX", "rotateY", "rotateZ", "round", "scale", "set", "str", "sub", "subtract", "create", "clone", "fromValues", "copy", "set", "add", "subtract", "multiply", "round", "scale", "len", "angle", "rotateX", "rotateY", "rotateZ", "str", "exactEquals", "equals", "sub", "mul", "add", "ceil", "clone", "copy", "create", "cross", "dist", "distance", "div", "divide", "dot", "equals", "exactEquals", "floor", "forEach", "fromValues", "inverse", "len", "length", "lerp", "max", "min", "mul", "multiply", "negate", "normalize", "random", "round", "scale", "scaleAndAdd", "set", "sqrDist", "sqrLen", "squaredDistance", "squaredLength", "str", "sub", "subtract", "transformMat4", "transformQuat", "zero", "create", "clone", "fromValues", "copy", "set", "add", "subtract", "multiply", "divide", "ceil", "floor", "min", "max", "round", "scale", "scaleAndAdd", "distance", "squaredDistance", "length", "squaredLength", "negate", "inverse", "normalize", "len", "dot", "cross", "lerp", "random", "v3", "transformMat4", "transformQuat", "zero", "str", "exactEquals", "equals", "sub", "mul", "div", "dist", "sqrDist", "sqrLen", "forEach", "create", "identity", "dot", "multiply", "rotateX", "rotateY", "rotateZ", "scale", "slerp", "random", "invert", "str", "clone", "fromValues", "copy", "set", "add", "mul", "lerp", "length", "len", "squaredLength", "sqrLen", "normalize", "exactEquals", "equals", "add", "angle", "ceil", "clone", "copy", "create", "cross", "dist", "distance", "div", "divide", "dot", "equals", "exactEquals", "floor", "forEach", "fromValues", "inverse", "len", "length", "lerp", "max", "min", "mul", "multiply", "negate", "normalize", "random", "rotate", "round", "scale", "scaleAndAdd", "set", "sqrDist", "sqrLen", "squaredDistance", "squaredLength", "str", "sub", "subtract", "transformMat3", "transformMat4", "zero", "create", "clone", "fromValues", "copy", "set", "add", "subtract", "multiply", "divide", "ceil", "floor", "min", "max", "round", "scale", "scaleAndAdd", "distance", "squaredDistance", "length", "squaredLength", "negate", "inverse", "normalize", "len", "dot", "cross", "lerp", "random", "transformMat3", "transformMat4", "rotate", "angle", "zero", "str", "exactEquals", "equals", "sub", "mul", "div", "dist", "sqrDist", "sqrLen", "forEach", "projection", "add", "sub", "normalize", "p", "near", "loggingEnabled", "min", "max", "State", "copy", "loggingEnabled", "logi", "loggingEnabled", "logi", "distance", "dot", "angle", "len", "scale", "exp", "len", "window", "pc"]
}
